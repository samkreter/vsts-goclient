---
swagger: "2.0"
info:
  description: ""
  version: "5.0-preview"
  title: "Git"
  termsOfService: "https://go.microsoft.com/fwlink/?LinkId=329770"
  contact:
    name: "nugetvss"
    email: "nugetvss@microsoft.com"
  license:
    name: "MICROSOFT SOFTWARE LICENSE TERMS"
    url: "https://go.microsoft.com/fwlink/?LinkId=329770"
host: "fabrikam-fiber-inc.visualstudio.com"
basePath: "/"
tags:
- name: "Annotated Tags"
  description: "Git annotated tags are tags with additional metadata including the\
    \ person who created the tag and a comment."
- name: "Blobs"
  description: "Blobs are files in the Git repository."
- name: "Cherry Picks"
  description: "This API provides a way to cherry pick into a new branch either a\
    \ specific commit or commits that are associated to a\npull request."
- name: "Commits"
  description: "Controller to handle all REST calls against commits"
- name: "Diffs"
  description: "Diffs compare a target version with a base version and return a list\
    \ of items that are only in the target version.\nIf either the target or base\
    \ version isn't specified, then the default branch is used."
- name: "Forks"
- name: "Import Requests"
  description: "Create, query, and update requests to import data from another source\
    \ control system."
- name: "Items"
  description: "Items are the files, folders, and submodules in a repository.\nFiles\
    \ are represented by blobs and folders are trees.\nIf the repository contains\
    \ submodules, they will appear as commits."
- name: "Merge Bases"
  description: "Ways to find merge base(s) between commits."
- name: "Policy Configurations"
  description: "This API provides a way to list Git policy configurations.  For more\
    \ information, see \n[Improve code quality with branch policies](https://go.microsoft.com/fwlink/?linkid=859025)"
- name: "Pull Request Attachments"
  description: "This API provides a way to create and retrieve files that have been\
    \ attached to a pull request"
- name: "Pull Request Comment Likes"
  description: "This API provides methods for marking comments on pull requests as\
    \ liked.\nLiking a comment is a used as a way of indicating agreement with the\
    \ author."
- name: "Pull Request Commits"
  description: "Provides REST API methods for Git commits associated with a pull request."
- name: "Pull Request Iteration Changes"
  description: "Controller to handle all REST calls against pull request iterations"
- name: "Pull Request Iterations"
  description: "Provides REST API methods for Git pull request iterations.\nIterations\
    \ are created as a result of creating and pushing updates to a pull request."
- name: "Pull Request Iteration Statuses"
  description: "Pull request statuses can be posted on pull request iteration to indicate\
    \ that status links particular iteration. Iteration statuses behave the same way\n\
    as pull request statuses, but can expire on new source updates when StatusPolicy\
    \ is properly configured."
- name: "Pull Request Labels"
  description: "Pull Request labels provide extensibility to the pull request experience.\
    \ \nThird party services or users with read permission in the repository can\n\
    create, get, and delete labels associated with a pull request via this REST API.\n\
    Labels are used to provide quick insights into a pull request, an example\ncan\
    \ be labelling a Pull request as \"WIP\", \"Feature\", or \"Bug\" to let others\n\
    know the state and purpose of the Pull Request."
- name: "Pull Request Properties"
  description: "This API provides a way to manage external properties associated with\
    \ a pull request. Third party services can use this API\nto store additional information\
    \ on the pull request without maintaining their own storage."
- name: "Pull Request Query"
- name: "Pull Request Reviewers"
- name: "Pull Requests"
  description: "This API provides a way to create, retrieve, and modify pull requests."
- name: "Pull Request Share"
- name: "Pull Request Statuses"
  description: "Pull request statuses provide extensibility to the pull request experience.\
    \ Third party services or users with read permission to the repository\ncan create\
    \ and get statuses associated with a pull request or an iteration via this REST\
    \ API. An example of pull request status can be \"CI Build Passed\",\n\"Integration\
    \ tests pending\", \"Linting check succeeded\".\nIn order to update a status create\
    \ a new status with the same genre and name values."
- name: "Pull Request Thread Comments"
  description: "This API provides a way to retrieve or modify comments associated\
    \ with threads in a pull request.\nEach thread in a pull request can contain one\
    \ or more comments."
- name: "Pull Request Threads"
  description: "This API provides a way to retrieve or modify threads in a pull request.\n\
    Each thread in a pull request can contain one or more comments."
- name: "Pull Request Work Items"
  description: "This API provides a way to manipulate the work items associated with\
    \ a pull request."
- name: "Pushes"
  description: "Create and Query Git pushes."
- name: "Refs"
  description: "Controller to handle REST requests for git refs"
- name: "Refs Favorites"
  description: "Controller to handle REST requests for Git Ref Favorites"
- name: "Repositories"
  description: "Controller to handle all REST calls against Git Repositories"
- name: "Reverts"
  description: "This API provides a way to revert into a new branch either a specific\
    \ commit or commits that are associated to a\npull request."
- name: "Stats"
  description: "Branch statistics indicate how far behind and ahead a branch is from\
    \ the default branch. \nBranch A is \"ahead\" of branch B if branch A contains\
    \ commits not in branch B's history."
- name: "Statuses"
  description: "This API provides a way to manipulate statuses associated with the\
    \ Git commit.\nCommit status allows you to mark commits with status information\
    \ from other systems.\nFor instance, it's used in VSTS to surface the state of\
    \ the build associated with the status in the web UI."
- name: "Suggestions"
  description: "API for retrieving git pull request suggestions."
- name: "Trees"
schemes:
- "https"
security:
- accessToken: []
paths:
  /{project}/_apis/git/deletedrepositories:
    get:
      tags:
      - "Repositories"
      description: "Retrieve deleted git repositories."
      operationId: "Get Deleted Repositories"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitDeletedRepository"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "deletedRepositories"
      x-ms-vss-method: "GetDeletedRepositories"
      x-ms-preview: true
  /{project}/_apis/git/favorites/refs:
    get:
      tags:
      - "Refs Favorites"
      description: "Gets the refs favorites for a repo and an identity."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "query"
        description: "The id of the repository."
        required: false
        type: "string"
        x-exportParamName: "RepositoryId"
        x-optionalDataType: "String"
      - name: "identityId"
        in: "query"
        description: "The id of the identity whose favorites are to be retrieved.\
          \ If null, the requesting identity is used."
        required: false
        type: "string"
        x-exportParamName: "IdentityId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitRefFavorite"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refsFavorites"
      x-ms-vss-method: "GetRefFavorites"
      x-ms-preview: true
    post:
      tags:
      - "Refs Favorites"
      description: "Creates a ref favorite"
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The ref favorite to create."
        required: true
        schema:
          $ref: "#/definitions/GitRefFavorite"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRefFavorite"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refsFavorites"
      x-ms-vss-method: "CreateFavorite"
      x-ms-preview: true
  /{project}/_apis/git/favorites/refs/{favoriteId}:
    get:
      tags:
      - "Refs Favorites"
      description: "Gets the refs favorite for a favorite Id."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "favoriteId"
        in: "path"
        description: "The Id of the requested ref favorite."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "FavoriteId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRefFavorite"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refsFavorites"
      x-ms-vss-method: "GetRefFavorite"
      x-ms-preview: true
    delete:
      tags:
      - "Refs Favorites"
      description: "Deletes the refs favorite specified"
      operationId: "Delete"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "favoriteId"
        in: "path"
        description: "The Id of the ref favorite to delete."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "FavoriteId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refsFavorites"
      x-ms-vss-method: "DeleteRefFavorite"
      x-ms-preview: true
  /{project}/_apis/git/policy/configurations:
    get:
      tags:
      - "Policy Configurations"
      description: "Retrieve a list of policy configurations by a given set of scope/filtering\
        \ criteria.\n\nBelow is a short description of how all of the query parameters\
        \ interact with each other:\n- repositoryId set, refName set: returns all\
        \ policy configurations that *apply* to a particular branch in a repository\n\
        - repositoryId set, refName unset: returns all policy configurations that\
        \ *apply* to a particular repository\n- repositoryId unset, refName unset:\
        \ returns all policy configurations that are *defined* at the project level\n\
        - repositoryId unset, refName set: returns all project-level branch policies,\
        \ plus the project level configurations\nFor all of the examples above, when\
        \ policyType is set, it'll restrict results to the given policy type"
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "query"
        description: "The repository id."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "RepositoryId"
      - name: "refName"
        in: "query"
        description: "The fully-qualified Git ref name (e.g. refs/heads/master)."
        required: false
        type: "string"
        x-exportParamName: "RefName"
        x-optionalDataType: "String"
      - name: "policyType"
        in: "query"
        description: "The policy type filter."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "PolicyType"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PolicyConfiguration"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "policyConfigurations"
      x-ms-vss-method: "GetPolicyConfigurations"
      x-ms-preview: true
  /{project}/_apis/git/pullrequests:
    get:
      tags:
      - "Pull Requests"
      description: "Retrieve all pull requests matching a specified criteria."
      operationId: "Get Pull Requests By Project"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "searchCriteria.includeLinks"
        in: "query"
        description: "Whether to include the _links field on the shallow references"
        required: false
        type: "boolean"
        x-exportParamName: "SearchCriteriaIncludeLinks"
        x-optionalDataType: "Bool"
      - name: "searchCriteria.sourceRefName"
        in: "query"
        description: "If set, search for pull requests from this branch."
        required: false
        type: "string"
        x-exportParamName: "SearchCriteriaSourceRefName"
        x-optionalDataType: "String"
      - name: "searchCriteria.sourceRepositoryId"
        in: "query"
        description: "If set, search for pull requests whose source branch is in this\
          \ repository."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaSourceRepositoryId"
      - name: "searchCriteria.targetRefName"
        in: "query"
        description: "If set, search for pull requests into this branch."
        required: false
        type: "string"
        x-exportParamName: "SearchCriteriaTargetRefName"
        x-optionalDataType: "String"
      - name: "searchCriteria.status"
        in: "query"
        description: "If set, search for pull requests that are in this state. Defaults\
          \ to Active if unset."
        required: false
        type: "string"
        enum:
        - "notSet"
        - "active"
        - "abandoned"
        - "completed"
        - "all"
        x-ms-enum:
          name: "PullRequestStatus"
          values:
          - value: "notSet"
            description: "Status not set. Default state."
          - value: "active"
            description: "Pull request is active."
          - value: "abandoned"
            description: "Pull request is abandoned."
          - value: "completed"
            description: "Pull request is completed."
          - value: "all"
            description: "Used in pull request search criterias to include all statuses."
        x-exportParamName: "SearchCriteriaStatus"
        x-optionalDataType: "String"
      - name: "searchCriteria.reviewerId"
        in: "query"
        description: "If set, search for pull requests that have this identity as\
          \ a reviewer."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaReviewerId"
      - name: "searchCriteria.creatorId"
        in: "query"
        description: "If set, search for pull requests that were created by this identity."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaCreatorId"
      - name: "searchCriteria.repositoryId"
        in: "query"
        description: "If set, search for pull requests whose target branch is in this\
          \ repository."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaRepositoryId"
      - name: "maxCommentLength"
        in: "query"
        description: "Not used."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "MaxCommentLength"
        x-optionalDataType: "Int32"
      - name: "$skip"
        in: "query"
        description: "The number of pull requests to ignore. For example, to retrieve\
          \ results 101-150, set top to 50 and skip to 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$top"
        in: "query"
        description: "The number of pull requests to retrieve."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "GetPullRequestsByProject"
      x-ms-preview: true
      x-ms-examples:
        Pull requests by project:
          $ref: "./httpExamples/PullRequests/GET__git_pullRequests.json"
  /{project}/_apis/git/pullrequests/{pullRequestId}:
    get:
      tags:
      - "Pull Requests"
      description: "Retrieve a pull request."
      operationId: "Get Pull Request By Id"
      produces:
      - "application/json"
      parameters:
      - name: "pullRequestId"
        in: "path"
        description: "The ID of the pull request to retrieve."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "GetPullRequestById"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequests/GET__git_repositories__repositoryId__pullRequests__pullRequestId_.json"
  /{project}/_apis/git/recycleBin/repositories:
    get:
      tags:
      - "Repositories"
      description: "Retrieve soft-deleted git repositories from the recycle bin."
      operationId: "Get Recycle Bin Repositories"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitDeletedRepository"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "recycleBinRepositories"
      x-ms-vss-method: "GetRecycleBinRepositories"
      x-ms-preview: true
  /{project}/_apis/git/recycleBin/repositories/{repositoryId}:
    delete:
      tags:
      - "Repositories"
      description: "Destroy (hard delete) a soft-deleted Git repository."
      operationId: "Delete Repository From Recycle Bin"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The ID of the repository."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "recycleBinRepositories"
      x-ms-vss-method: "DeleteRepositoryFromRecycleBin"
      x-ms-preview: true
    patch:
      tags:
      - "Repositories"
      description: "Recover a soft-deleted Git repository. Recently deleted repositories\
        \ go into a soft-delete state for a period of time before they are hard deleted\
        \ and become unrecoverable."
      operationId: "Restore Repository From Recycle Bin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/GitRecycleBinRepositoryDetails"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The ID of the repository."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "recycleBinRepositories"
      x-ms-vss-method: "RestoreRepositoryFromRecycleBin"
      x-ms-preview: true
  /{project}/_apis/git/repositories:
    get:
      tags:
      - "Repositories"
      description: "Retrieve git repositories."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeLinks"
        in: "query"
        description: "[optional] True to include reference links. The default value\
          \ is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "includeAllUrls"
        in: "query"
        description: "[optional] True to include all remote URLs. The default value\
          \ is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAllUrls"
        x-optionalDataType: "Bool"
      - name: "includeHidden"
        in: "query"
        description: "[optional] True to include hidden repositories. The default\
          \ value is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeHidden"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "GetRepositories"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Repositories/GET__git_repositories.json"
    post:
      tags:
      - "Repositories"
      description: "Create a git repository in a team project."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Specify the repo name, team project and/or parent repository.\
          \ Team project information can be ommitted from gitRepositoryToCreate if\
          \ the request is project-scoped (i.e., includes project Id)."
        required: true
        schema:
          $ref: "#/definitions/GitRepositoryCreateOptions"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "sourceRef"
        in: "query"
        description: "[optional] Specify the source refs to use while creating a fork\
          \ repo"
        required: false
        type: "string"
        x-exportParamName: "SourceRef"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "CreateRepository"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Repositories/POST__git_repositories.json"
  /{project}/_apis/git/repositories/{repositoryId}:
    get:
      tags:
      - "Repositories"
      description: "Retrieve a git repository."
      operationId: "Get Repository"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "GetRepository"
      x-ms-preview: true
      x-ms-examples:
        Get a repository by repositoryId:
          $ref: "./httpExamples/Repositories/GET__git_repositories__repositoryId_.json"
        Get a repository by remote URL:
          $ref: "./httpExamples/Repositories/GET__git_repositories__remoteurl.json"
    delete:
      tags:
      - "Repositories"
      description: "Delete a git repository"
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "DeleteRepository"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Repositories/DELETE__git_repositories__repositoryId_.json"
    patch:
      tags:
      - "Repositories"
      description: "Updates the Git repository with either a new repo name or a new\
        \ default branch."
      operationId: "Update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Specify a new repo name or a new default branch of the repository"
        required: true
        schema:
          $ref: "#/definitions/GitRepository"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "UpdateRepository"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Repositories/PATCH__git_repositories__repositoryId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/annotatedtags:
    post:
      tags:
      - "Annotated Tags"
      description: "Create an annotated tag.\n\nRepositories have both a name and\
        \ an identifier. Identifiers are globally unique, but several projects\nmay\
        \ contain a repository of the same name. You don't need to include the project\
        \ if you specify a\nrepository by ID. However, if you specify a repository\
        \ by name, you must also specify the project (by name or ID)."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object containing details of tag to be created."
        required: true
        schema:
          $ref: "#/definitions/GitAnnotatedTag"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitAnnotatedTag"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "annotatedTags"
      x-ms-vss-method: "CreateAnnotatedTag"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/annotatedTags/POST__git_repositories__annotated__tags.json"
  /{project}/_apis/git/repositories/{repositoryId}/annotatedtags/{objectId}:
    get:
      tags:
      - "Annotated Tags"
      description: "Get an annotated tag.\n\nRepositories have both a name and an\
        \ identifier. Identifiers are globally unique, but several projects\nmay contain\
        \ a repository of the same name. You don't need to include the project if\
        \ you specify a\nrepository by ID. However, if you specify a repository by\
        \ name, you must also specify the project (by name or ID)."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "objectId"
        in: "path"
        description: "ObjectId (Sha1Id) of tag to get."
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitAnnotatedTag"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "annotatedTags"
      x-ms-vss-method: "GetAnnotatedTag"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/annotatedTags/GET__git_repositories__annotated__tags.json"
  /{project}/_apis/git/repositories/{repositoryId}/blobs:
    post:
      tags:
      - "Blobs"
      description: "Gets one or more blobs in a zip file download."
      operationId: "Get Blobs Zip"
      consumes:
      - "application/json"
      produces:
      - "application/zip"
      parameters:
      - in: "body"
        name: "body"
        description: "Blob IDs (SHA1 hashes) to be returned in the zip file."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "filename"
        in: "query"
        description: ""
        required: false
        type: "string"
        x-exportParamName: "Filename"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            format: "Stream"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "blobs"
      x-ms-vss-method: "GetBlobs"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/blobs/{sha1}:
    get:
      tags:
      - "Blobs"
      description: "Get a single blob.\n\nRepositories have both a name and an identifier.\
        \ Identifiers are globally unique,\nbut several projects may contain a repository\
        \ of the same name. You don't need to include\nthe project if you specify\
        \ a repository by ID. However, if you specify a repository by name,\nyou must\
        \ also specify the project (by name or ID)."
      operationId: "Get Blob"
      produces:
      - "application/zip"
      - "application/octet-stream"
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "sha1"
        in: "path"
        description: "SHA1 hash of the file. You can get the SHA1 of a file using\
          \ the \"Git/Items/Get Item\" endpoint."
        required: true
        type: "string"
        x-exportParamName: "Sha1"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "download"
        in: "query"
        description: "If true, prompt for a download rather than rendering in a browser.\
          \ Note: this value defaults to true if $format is zip"
        required: false
        type: "boolean"
        x-exportParamName: "Download"
        x-optionalDataType: "Bool"
      - name: "fileName"
        in: "query"
        description: "Provide a fileName to use for a download."
        required: false
        type: "string"
        x-exportParamName: "FileName"
        x-optionalDataType: "String"
      - name: "$format"
        in: "query"
        description: "Options: json, zip, text, octetstream. If not set, defaults\
          \ to the MIME type set in the Accept header."
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      - name: "resolveLfs"
        in: "query"
        description: "If true, try to resolve a blob to its LFS contents, if it's\
          \ an LFS pointer file. Only compatible with octet-stream Accept headers\
          \ or $format types"
        required: false
        type: "boolean"
        x-exportParamName: "ResolveLfs"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitBlobRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "blobs"
      x-ms-vss-method: "GetBlob"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Blobs/GET__git_repositories__repositoryId__blobs__objectId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/cherryPicks:
    get:
      tags:
      - "Cherry Picks"
      description: "Retrieve information about a cherry pick for a specific branch."
      operationId: "Get Cherry Pick For Ref Name"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "refName"
        in: "query"
        description: "The GitAsyncRefOperationParameters generatedRefName used for\
          \ the cherry pick operation."
        required: true
        type: "string"
        x-exportParamName: "RefName"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCherryPick"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "cherryPicks"
      x-ms-vss-method: "GetCherryPickForRefName"
      x-ms-preview: true
    post:
      tags:
      - "Cherry Picks"
      description: "Cherry pick a specific commit or commits that are associated to\
        \ a pull request into a new branch."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/GitAsyncRefOperationParameters"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCherryPick"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "cherryPicks"
      x-ms-vss-method: "CreateCherryPick"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}:
    get:
      tags:
      - "Cherry Picks"
      description: "Retrieve information about a cherry pick by cherry pick Id."
      operationId: "Get Cherry Pick"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "cherryPickId"
        in: "path"
        description: "ID of the cherry pick."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CherryPickId"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCherryPick"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "cherryPicks"
      x-ms-vss-method: "GetCherryPick"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/commits:
    get:
      tags:
      - "Commits"
      description: "Retrieve a list of commits associated with a particular push."
      operationId: "Get Push Commits"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The id or friendly name of the repository. To use the friendly\
          \ name, projectId must also be specified."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pushId"
        in: "query"
        description: "The id of the push."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PushId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "top"
        in: "query"
        description: "The maximum number of commits to return (\"get the top x commits\"\
          )."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "skip"
        in: "query"
        description: "The number of commits to skip."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "includeLinks"
        in: "query"
        description: "Set to false to avoid including REST Url links for resources.\
          \ Defaults to true."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "commits"
      x-ms-vss-method: "GetPushCommits"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__pushes__pushId__commits.json"
  /{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}:
    get:
      tags:
      - "Commits"
      description: "Retrieve a particular commit."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "commitId"
        in: "path"
        description: "The id of the commit."
        required: true
        type: "string"
        x-exportParamName: "CommitId"
      - name: "repositoryId"
        in: "path"
        description: "The id or friendly name of the repository. To use the friendly\
          \ name, projectId must also be specified."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "changeCount"
        in: "query"
        description: "The number of changes to include in the result."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChangeCount"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCommit"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "commits"
      x-ms-vss-method: "GetCommit"
      x-ms-preview: true
      x-ms-examples:
        Get by ID:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits__commitId_.json"
        With limited changes:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits__commitId__changeCount-10.json"
  /{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes:
    get:
      tags:
      - "Commits"
      description: "Retrieve changes for a particular commit."
      operationId: "Get Changes"
      produces:
      - "application/json"
      parameters:
      - name: "commitId"
        in: "path"
        description: "The id of the commit."
        required: true
        type: "string"
        x-exportParamName: "CommitId"
      - name: "repositoryId"
        in: "path"
        description: "The id or friendly name of the repository. To use the friendly\
          \ name, projectId must also be specified."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "top"
        in: "query"
        description: "The maximum number of changes to return."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "skip"
        in: "query"
        description: "The number of changes to skip."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCommitChanges"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "changes"
      x-ms-vss-method: "GetChanges"
      x-ms-preview: true
      x-ms-examples:
        With changes:
          $ref: "./httpExamples/Changes/GET__git_repositories__repositoryId__commits__commitId__changes_top-_top__skip-_skip_.json"
  /{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/statuses:
    get:
      tags:
      - "Statuses"
      description: "Get statuses associated with the Git commit."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "commitId"
        in: "path"
        description: "ID of the Git commit."
        required: true
        type: "string"
        x-exportParamName: "CommitId"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "top"
        in: "query"
        description: "Optional. The number of statuses to retrieve. Default is 1000."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "skip"
        in: "query"
        description: "Optional. The number of statuses to ignore. Default is 0. For\
          \ example, to retrieve results 101-150, set top to 50 and skip to 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "latestOnly"
        in: "query"
        description: "The flag indicates whether to get only latest statuses grouped\
          \ by `Context.Name` and `Context.Genre`."
        required: false
        type: "boolean"
        x-exportParamName: "LatestOnly"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitStatus"
      security:
      - oauth2:
        - "vso.code"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "statuses"
      x-ms-vss-method: "GetStatuses"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Statuses/GET__git_repositories__repositoryId__commits__commitId__statuses.json"
    post:
      tags:
      - "Statuses"
      description: "Create Git commit status."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Git commit status object to create."
        required: true
        schema:
          $ref: "#/definitions/GitStatus"
        x-exportParamName: "Body"
      - name: "commitId"
        in: "path"
        description: "ID of the Git commit."
        required: true
        type: "string"
        x-exportParamName: "CommitId"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitStatus"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "statuses"
      x-ms-vss-method: "CreateCommitStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Statuses/POST__git_repositories__repositoryId__commits__commitId__statuses.json"
  /{project}/_apis/git/repositories/{repositoryId}/commitsbatch:
    post:
      tags:
      - "Commits"
      description: "Retrieve git commits for a project matching the search criteria"
      operationId: "Get Commits Batch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Search options"
        required: true
        schema:
          $ref: "#/definitions/GitQueryCommitsCriteria"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "$skip"
        in: "query"
        description: "Number of commits to skip."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$top"
        in: "query"
        description: "Maximum number of commits to return."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "includeStatuses"
        in: "query"
        description: "True to include additional commit status information."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeStatuses"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "commitsBatch"
      x-ms-vss-method: "GetCommitsBatch"
      x-ms-preview: true
      x-ms-examples:
        Commits by a list of commit IDs:
          $ref: "./httpExamples/CommitsBatch/POST__git_repositories__repositoryId__commitsBatch__ids.json"
        Commits between two versions:
          $ref: "./httpExamples/CommitsBatch/POST__git_repositories__repositoryId__commitsBatch2.json"
  /{project}/_apis/git/repositories/{repositoryId}/diffs/commits:
    get:
      tags:
      - "Diffs"
      description: "Find the closest common commit (the merge base) between base and\
        \ target commits, and get the diff between either the base and target commits\
        \ or common and target commits."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "diffCommonCommit"
        in: "query"
        description: "If true, diff between common and target commits. If false, diff\
          \ between base and target commits."
        required: false
        type: "boolean"
        x-exportParamName: "DiffCommonCommit"
        x-optionalDataType: "Bool"
      - name: "$top"
        in: "query"
        description: "Maximum number of changes to return. Defaults to 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "$skip"
        in: "query"
        description: "Number of changes to skip"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "baseVersionOptions"
        in: "query"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
        x-exportParamName: "BaseVersionOptions"
        x-optionalDataType: "String"
      - name: "baseVersion"
        in: "query"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
        x-exportParamName: "BaseVersion"
        x-optionalDataType: "String"
      - name: "baseVersionType"
        in: "query"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
        x-exportParamName: "BaseVersionType"
        x-optionalDataType: "String"
      - name: "targetVersionOptions"
        in: "query"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
        x-exportParamName: "TargetVersionOptions"
        x-optionalDataType: "String"
      - name: "targetVersion"
        in: "query"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
        x-exportParamName: "TargetVersion"
        x-optionalDataType: "String"
      - name: "targetVersionType"
        in: "query"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
        x-exportParamName: "TargetVersionType"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitCommitDiffs"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "commitDiffs"
      x-ms-vss-method: "GetCommitDiffs"
      x-ms-preview: true
      x-ms-examples:
        Between commit IDs:
          $ref: "./httpExamples/CommitDiffs/GET__git_repositories__repositoryId__diffs_commits_baseVersionType-_baseVersionType_.json"
        Between branches:
          $ref: "./httpExamples/CommitDiffs/GET__git_repositories__repositoryId__diffs_commits_targetVersion-_targetVersion__baseVersion-_baseVersion_.json"
        A page at a time:
          $ref: "./httpExamples/CommitDiffs/GET__git_repositories__repositoryId__diffs_commits_targetVersion-_targetVersion__baseVersion-_baseVersion___top-_top___skip-_skip_.json"
  /{project}/_apis/git/repositories/{repositoryId}/importRequests:
    get:
      tags:
      - "Import Requests"
      description: "Retrieve import requests for a repository."
      operationId: "Query"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "includeAbandoned"
        in: "query"
        description: "True to include abandoned import requests in the results."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAbandoned"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitImportRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "importRequests"
      x-ms-vss-method: "QueryImportRequests"
      x-ms-preview: true
      x-ms-examples:
        By repository ID:
          $ref: "./httpExamples/ImportRequests/GET__git_repositories__repositoryId__importRequests.json"
        By repository ID with abandoned requests:
          $ref: "./httpExamples/ImportRequests/GET__git_repositories__repositoryId__importRequests_includeAbandoned-True.json"
    post:
      tags:
      - "Import Requests"
      description: "Create an import request."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The import request to create."
        required: true
        schema:
          $ref: "#/definitions/GitImportRequest"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitImportRequest"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "importRequests"
      x-ms-vss-method: "CreateImportRequest"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/ImportRequests/POST__git_repositories__repositoryId__importRequests.json"
  /{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}:
    get:
      tags:
      - "Import Requests"
      description: "Retrieve a particular import request."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "importRequestId"
        in: "path"
        description: "The unique identifier for the import request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ImportRequestId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitImportRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "importRequests"
      x-ms-vss-method: "GetImportRequest"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/ImportRequests/GET__git_repositories__repositoryId__importRequests__importRequestId_.json"
    patch:
      tags:
      - "Import Requests"
      description: "Retry or abandon a failed import request.\n\nThere can only be\
        \ one active import request associated with a repository. Marking a failed\
        \ import request abandoned makes it inactive."
      operationId: "Update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The updated version of the import request. Currently, the only\
          \ change allowed is setting the Status to Queued or Abandoned."
        required: true
        schema:
          $ref: "#/definitions/GitImportRequest"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "importRequestId"
        in: "path"
        description: "The unique identifier for the import request to update."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ImportRequestId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitImportRequest"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "importRequests"
      x-ms-vss-method: "UpdateImportRequest"
      x-ms-preview: true
      x-ms-examples:
        Retry or abandon a failed import request:
          $ref: "./httpExamples/ImportRequests/PATCH__git_repositories__repositoryId__importRequests__importRequestId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/items:
    get:
      tags:
      - "Items"
      description: "Get Item Metadata and/or Content for a collection of items. The\
        \ download parameter is to indicate whether the content should be available\
        \ as a download or just sent as a stream in the response. Doesn't apply to\
        \ zipped content which is always returned as a download."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "scopePath"
        in: "query"
        description: "The path scope.  The default is null."
        required: false
        type: "string"
        x-exportParamName: "ScopePath"
        x-optionalDataType: "String"
      - name: "recursionLevel"
        in: "query"
        description: "The recursion level of this request. The default is 'none',\
          \ no recursion."
        required: false
        type: "string"
        enum:
        - "none"
        - "oneLevel"
        - "oneLevelPlusNestedEmptyFolders"
        - "full"
        x-ms-enum:
          name: "VersionControlRecursionType"
          values:
          - value: "none"
            description: "Only return the specified item."
          - value: "oneLevel"
            description: "Return the specified item and its direct children."
          - value: "oneLevelPlusNestedEmptyFolders"
            description: "Return the specified item and its direct children, as well\
              \ as recursive chains of nested child folders that only contain a single\
              \ folder."
          - value: "full"
            description: "Return specified item and all descendants"
        x-exportParamName: "RecursionLevel"
        x-optionalDataType: "String"
      - name: "includeContentMetadata"
        in: "query"
        description: "Set to true to include content metadata.  Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeContentMetadata"
        x-optionalDataType: "Bool"
      - name: "latestProcessedChange"
        in: "query"
        description: "Set to true to include the lastest changes.  Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "LatestProcessedChange"
        x-optionalDataType: "Bool"
      - name: "download"
        in: "query"
        description: "Set to true to download the response as a file.  Default is\
          \ false."
        required: false
        type: "boolean"
        x-exportParamName: "Download"
        x-optionalDataType: "Bool"
      - name: "includeLinks"
        in: "query"
        description: "Set to true to include links to items.  Default is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "$format"
        in: "query"
        description: "If specified, this overrides the HTTP Accept request header\
          \ to return either 'json' or 'zip'. If $format is specified, then api-version\
          \ should also be specified as a query parameter."
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      - name: "versionDescriptor.versionOptions"
        in: "query"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
        x-exportParamName: "VersionDescriptorVersionOptions"
        x-optionalDataType: "String"
      - name: "versionDescriptor.version"
        in: "query"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
        x-exportParamName: "VersionDescriptorVersion"
        x-optionalDataType: "String"
      - name: "versionDescriptor.versionType"
        in: "query"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
        x-exportParamName: "VersionDescriptorVersionType"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitItem"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "items"
      x-ms-vss-method: "GetItems"
      x-ms-preview: true
      x-ms-examples:
        For a path:
          $ref: "./httpExamples/Items/GET__git_repositories__repositoryId__items_scopePath-_folderPath_.json"
        Single level of recursion:
          $ref: "./httpExamples/Items/GET__git_repositories__repositoryId__items_scopePath-_folderPath__recursionLevel-OneLevel.json"
        Full recursion and with content metadata:
          $ref: "./httpExamples/Items/GET__git_repositories__repositoryId__items_scopePath-_folderPath__recursionLevel-Full_includeContentMetadata-true.json"
  /{project}/_apis/git/repositories/{repositoryId}/itemsbatch:
    post:
      tags:
      - "Items"
      description: "Post for retrieving a creating a batch out of a set of items in\
        \ a repo / project given a list of paths or a long path"
      operationId: "Get Items Batch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request data attributes: ItemDescriptors, IncludeContentMetadata,\
          \ LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items\
          \ to fetch, including path, version, and recursion level. IncludeContentMetadata:\
          \ Whether to include metadata for all items LatestProcessedChange: Whether\
          \ to include shallow ref to commit that last changed each item. IncludeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: true
        schema:
          $ref: "#/definitions/GitItemRequestData"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository"
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "array"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "itemsBatch"
      x-ms-vss-method: "GetItemsBatch"
      x-ms-preview: true
      x-ms-examples:
        Multiple items:
          $ref: "./httpExamples/ItemsBatch/POST__git_repositories__repositoryId__itemsBatch.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullrequestquery:
    post:
      tags:
      - "Pull Request Query"
      description: "This API is used to find what pull requests are related to a given\
        \ commit.  It can be used to either find the pull request that created a particular\
        \ merge commit or it can be used to find all pull requests that have ever\
        \ merged a particular commit.  The input is a list of queries which each contain\
        \ a list of commits. For each commit that you search against, you will get\
        \ back a dictionary of commit -> pull requests."
      operationId: "Get"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The list of queries to perform."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequestQuery"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestQuery"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestQuery"
      x-ms-vss-method: "GetPullRequestQuery"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullrequests:
    get:
      tags:
      - "Pull Requests"
      description: "Retrieve all pull requests matching a specified criteria."
      operationId: "Get Pull Requests"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "searchCriteria.includeLinks"
        in: "query"
        description: "Whether to include the _links field on the shallow references"
        required: false
        type: "boolean"
        x-exportParamName: "SearchCriteriaIncludeLinks"
        x-optionalDataType: "Bool"
      - name: "searchCriteria.sourceRefName"
        in: "query"
        description: "If set, search for pull requests from this branch."
        required: false
        type: "string"
        x-exportParamName: "SearchCriteriaSourceRefName"
        x-optionalDataType: "String"
      - name: "searchCriteria.sourceRepositoryId"
        in: "query"
        description: "If set, search for pull requests whose source branch is in this\
          \ repository."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaSourceRepositoryId"
      - name: "searchCriteria.targetRefName"
        in: "query"
        description: "If set, search for pull requests into this branch."
        required: false
        type: "string"
        x-exportParamName: "SearchCriteriaTargetRefName"
        x-optionalDataType: "String"
      - name: "searchCriteria.status"
        in: "query"
        description: "If set, search for pull requests that are in this state. Defaults\
          \ to Active if unset."
        required: false
        type: "string"
        enum:
        - "notSet"
        - "active"
        - "abandoned"
        - "completed"
        - "all"
        x-ms-enum:
          name: "PullRequestStatus"
          values:
          - value: "notSet"
            description: "Status not set. Default state."
          - value: "active"
            description: "Pull request is active."
          - value: "abandoned"
            description: "Pull request is abandoned."
          - value: "completed"
            description: "Pull request is completed."
          - value: "all"
            description: "Used in pull request search criterias to include all statuses."
        x-exportParamName: "SearchCriteriaStatus"
        x-optionalDataType: "String"
      - name: "searchCriteria.reviewerId"
        in: "query"
        description: "If set, search for pull requests that have this identity as\
          \ a reviewer."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaReviewerId"
      - name: "searchCriteria.creatorId"
        in: "query"
        description: "If set, search for pull requests that were created by this identity."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaCreatorId"
      - name: "searchCriteria.repositoryId"
        in: "query"
        description: "If set, search for pull requests whose target branch is in this\
          \ repository."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaRepositoryId"
      - name: "maxCommentLength"
        in: "query"
        description: "Not used."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "MaxCommentLength"
        x-optionalDataType: "Int32"
      - name: "$skip"
        in: "query"
        description: "The number of pull requests to ignore. For example, to retrieve\
          \ results 101-150, set top to 50 and skip to 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$top"
        in: "query"
        description: "The number of pull requests to retrieve."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "GetPullRequests"
      x-ms-preview: true
      x-ms-examples:
        Pull requests by repository:
          $ref: "./httpExamples/PullRequests/GET__git_repositories__repositoryId__pullRequests.json"
        Just completed pull requests:
          $ref: "./httpExamples/PullRequests/GET__git_repositories__repositoryId__pullRequests_status-completed.json"
        Targeting a specific branch:
          $ref: "./httpExamples/PullRequests/GET__git_repositories__repositoryId__pullRequests_targetRefName-refs_heads_master.json"
    post:
      tags:
      - "Pull Requests"
      description: "Create a pull request."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The pull request to create."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequest"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "supportsIterations"
        in: "query"
        description: "If true, subsequent pushes to the pull request will be individually\
          \ reviewable. Set this to false for large pull requests for performance\
          \ reasons if this functionality is not needed."
        required: false
        type: "boolean"
        x-exportParamName: "SupportsIterations"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "CreatePullRequest"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequests/POST__git_repositories__repositoryId__pullRequests.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullrequests/{pullRequestId}:
    get:
      tags:
      - "Pull Requests"
      description: "Retrieve a pull request."
      operationId: "Get Pull Request"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "The ID of the pull request to retrieve."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "maxCommentLength"
        in: "query"
        description: "Not used."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "MaxCommentLength"
        x-optionalDataType: "Int32"
      - name: "$skip"
        in: "query"
        description: "Not used."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$top"
        in: "query"
        description: "Not used."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "includeCommits"
        in: "query"
        description: "If true, the pull request will be returned with the associated\
          \ commits."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCommits"
        x-optionalDataType: "Bool"
      - name: "includeWorkItemRefs"
        in: "query"
        description: "If true, the pull request will be returned with the associated\
          \ work item references."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeWorkItemRefs"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "GetPullRequest"
      x-ms-preview: true
    patch:
      tags:
      - "Pull Requests"
      description: "Update a pull request.\n\nThese are the properties that can be\
        \ updated with the API:\n - Status\n - Title\n - Description\n - CompletionOptions\n\
        \ - MergeOptions\n - AutoCompleteSetBy.Id\n - TargetRefName (when the PR retargeting\
        \ feature is enabled)\n Attempting to update other properties outside of this\
        \ list will either cause the server to throw an `InvalidArgumentValueException`,\n\
        \ or to silently ignore the update."
      operationId: "Update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The pull request content to update."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequest"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "The ID of the pull request to retrieve."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequest"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequests"
      x-ms-vss-method: "UpdatePullRequest"
      x-ms-preview: true
      x-ms-examples:
        Update title:
          $ref: "./httpExamples/PullRequests/PATCH__git_repositories__repositoryId__pullRequests__pullRequestId_.json"
        Update description:
          $ref: "./httpExamples/PullRequests/PATCH__git_repositories__repositoryId__pullRequests__pullRequestId_2.json"
        Enable auto-completion and set other completion options:
          $ref: "./httpExamples/PullRequests/PATCH__git_repositories__repositoryId__pullRequests__autoCompletePullRequestId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments:
    get:
      tags:
      - "Pull Request Attachments"
      description: "Get a list of files attached to a given pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Attachment"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestAttachments"
      x-ms-vss-method: "GetAttachments"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}:
    get:
      tags:
      - "Pull Request Attachments"
      description: "Get the file content of a pull request attachment."
      operationId: "Get"
      produces:
      - "application/octet-stream"
      - "application/zip"
      parameters:
      - name: "fileName"
        in: "path"
        description: "The name of the attachment."
        required: true
        type: "string"
        x-exportParamName: "FileName"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            format: "Stream"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestAttachments"
      x-ms-vss-method: "GetAttachment"
      x-ms-preview: true
    post:
      tags:
      - "Pull Request Attachments"
      description: "Attach a new file to a pull request."
      operationId: "Create"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Stream to upload"
        required: true
        schema:
          type: "string"
          format: "Stream"
        x-exportParamName: "Body"
      - name: "fileName"
        in: "path"
        description: "The name of the file."
        required: true
        type: "string"
        x-exportParamName: "FileName"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Attachment"
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/Attachment"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestAttachments"
      x-ms-vss-method: "CreateAttachment"
      x-ms-preview: true
    delete:
      tags:
      - "Pull Request Attachments"
      description: "Delete a pull request attachment."
      operationId: "Delete"
      parameters:
      - name: "fileName"
        in: "path"
        description: "The name of the attachment to delete."
        required: true
        type: "string"
        x-exportParamName: "FileName"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestAttachments"
      x-ms-vss-method: "DeleteAttachment"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits:
    get:
      tags:
      - "Pull Request Commits"
      description: "Get the commits for the specified pull request."
      operationId: "Get Pull Request Commits"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestCommits"
      x-ms-vss-method: "GetPullRequestCommits"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations:
    get:
      tags:
      - "Pull Request Iterations"
      description: "Get the list of iterations for the specified pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeCommits"
        in: "query"
        description: "If true, include the commits associated with each iteration\
          \ in the response."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCommits"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequestIteration"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterations"
      x-ms-vss-method: "GetPullRequestIterations"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}:
    get:
      tags:
      - "Pull Request Iterations"
      description: "Get the specified iteration for a pull request."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration to return."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestIteration"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterations"
      x-ms-vss-method: "GetPullRequestIteration"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes:
    get:
      tags:
      - "Pull Request Iteration Changes"
      description: "Retrieve the changes made in a pull request between two iterations."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration. <br /> Iteration IDs are zero-based\
          \ with zero indicating the common commit between the source and target branches.\
          \ Iteration one is the head of the source branch at the time the pull request\
          \ is created and subsequent iterations are created when there are pushes\
          \ to the source branch."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "$top"
        in: "query"
        description: "Optional. The number of changes to retrieve.  The default value\
          \ is 100 and the maximum value is 2000."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "$skip"
        in: "query"
        description: "Optional. The number of changes to ignore.  For example, to\
          \ retrieve changes 101-150, set top 50 and skip to 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$compareTo"
        in: "query"
        description: "ID of the pull request iteration to compare against.  The default\
          \ value is zero which indicates the comparison is made against the common\
          \ commit between the source and target branches"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "CompareTo"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestIterationChanges"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationChanges"
      x-ms-vss-method: "GetPullRequestIterationChanges"
      x-ms-preview: true
      x-ms-examples:
        Changes in a specific iteration:
          $ref: "./httpExamples/PullRequestIterationChanges/GET__git_repositories__repositoryId__pullRequests__pullRequestId__iterations__iterationId__changes.json"
        Changes since an earlier iteration:
          $ref: "./httpExamples/PullRequestIterationChanges/GET__git_repositories__repositoryId__pullRequests__pullRequestId__iterations__iterationId__changes__compareTo.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits:
    get:
      tags:
      - "Pull Request Commits"
      description: "Get the commits for the specified iteration of a pull request."
      operationId: "Get Pull Request Iteration Commits"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the iteration from which to get the commits."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestCommits"
      x-ms-vss-method: "GetPullRequestIterationCommits"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses:
    get:
      tags:
      - "Pull Request Iteration Statuses"
      description: "Get all the statuses associated with a pull request iteration."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationStatuses"
      x-ms-vss-method: "GetPullRequestIterationStatuses"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestIterationStatuses/GET_git_pullRequestStatuses_iterationStatuses.json"
    post:
      tags:
      - "Pull Request Iteration Statuses"
      description: "Create a pull request status on the iteration. This operation\
        \ will have the same result as Create status on pull request with specified\
        \ iteration ID in the request body.\n\nThe only required field for the status\
        \ is `Context.Name` that uniquely identifies the status.\nNote that `iterationId`\
        \ in the request body is optional since `iterationId` can be specified in\
        \ the URL.\nA conflict between `iterationId` in the URL and `iterationId`\
        \ in the request body will result in status code 400."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pull request status to create."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequestStatus"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationStatuses"
      x-ms-vss-method: "CreatePullRequestIterationStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestIterationStatuses/POST_git_pullRequestStatuses_iterationStatus.json"
    patch:
      tags:
      - "Pull Request Iteration Statuses"
      description: "Update pull request iteration statuses collection. The only supported\
        \ operation type is `remove`.\n\nThis operation allows to delete multiple\
        \ statuses in one call.\nThe path of the `remove` operation should refer to\
        \ the ID of the pull request status.\nFor example `path=\"/1\"` refers to\
        \ the pull request status with ID 1."
      operationId: "Update"
      consumes:
      - "application/json-patch+json"
      parameters:
      - in: "body"
        name: "body"
        description: "Operations to apply to the pull request statuses in JSON Patch\
          \ format."
        required: true
        schema:
          $ref: "#/definitions/JsonPatchDocument"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationStatuses"
      x-ms-vss-method: "UpdatePullRequestIterationStatuses"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestIterationStatuses/PATCH_git_pullRequestStatuses_iterationStatuses.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}:
    get:
      tags:
      - "Pull Request Iteration Statuses"
      description: "Get the specific pull request iteration status by ID. The status\
        \ ID is unique within the pull request across all iterations."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "statusId"
        in: "path"
        description: "ID of the pull request status."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "StatusId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationStatuses"
      x-ms-vss-method: "GetPullRequestIterationStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestIterationStatuses/GET_git_pullRequestStatuses_iterationStatus.json"
    delete:
      tags:
      - "Pull Request Iteration Statuses"
      description: "Delete pull request iteration status.\n\nYou can remove multiple\
        \ statuses in one call by using Update operation."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "iterationId"
        in: "path"
        description: "ID of the pull request iteration."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "IterationId"
      - name: "statusId"
        in: "path"
        description: "ID of the pull request status."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "StatusId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestIterationStatuses"
      x-ms-vss-method: "DeletePullRequestIterationStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestIterationStatuses/DELETE_git_pullRequestStatuses_iterationStatus.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels:
    get:
      tags:
      - "Pull Request Labels"
      description: "Get all the labels assigned to a pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "Project ID or project name."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebApiTagDefinition"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestLabels"
      x-ms-vss-method: "GetPullRequestLabels"
      x-ms-preview: true
    post:
      tags:
      - "Pull Request Labels"
      description: "Create a label for a specified pull request. The only required\
        \ field is the name of the new label."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Label to assign to the pull request."
        required: true
        schema:
          $ref: "#/definitions/WebApiCreateTagRequestData"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "Project ID or project name."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebApiTagDefinition"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestLabels"
      x-ms-vss-method: "CreatePullRequestLabel"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}:
    get:
      tags:
      - "Pull Request Labels"
      description: "Retrieves a single label that has been assigned to a pull request."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "labelIdOrName"
        in: "path"
        description: "The name or ID of the label requested."
        required: true
        type: "string"
        x-exportParamName: "LabelIdOrName"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "Project ID or project name."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebApiTagDefinition"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestLabels"
      x-ms-vss-method: "GetPullRequestLabel"
      x-ms-preview: true
    delete:
      tags:
      - "Pull Request Labels"
      description: "Removes a label from the set of those assigned to the pull request."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "labelIdOrName"
        in: "path"
        description: "The name or ID of the label requested."
        required: true
        type: "string"
        x-exportParamName: "LabelIdOrName"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "Project ID or project name."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestLabels"
      x-ms-vss-method: "DeletePullRequestLabels"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties:
    get:
      tags:
      - "Pull Request Properties"
      description: "Get external properties of the pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PropertiesCollection"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestProperties"
      x-ms-vss-method: "GetPullRequestProperties"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestProperties/GetPullRequestProperties.json"
    patch:
      tags:
      - "Pull Request Properties"
      description: "Create or update pull request external properties. The patch operation\
        \ can be `add`, `replace` or `remove`. For `add` operation, the path can be\
        \ empty. If the path is empty, the value must be a list of key value pairs.\
        \ For `replace` operation, the path cannot be empty. If the path does not\
        \ exist, the property will be added to the collection. For `remove` operation,\
        \ the path cannot be empty. If the path does not exist, no action will be\
        \ performed."
      operationId: "Update"
      consumes:
      - "application/json-patch+json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Properties to add, replace or remove in JSON Patch format."
        required: true
        schema:
          $ref: "#/definitions/JsonPatchDocument"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PropertiesCollection"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestProperties"
      x-ms-vss-method: "UpdatePullRequestProperties"
      x-ms-preview: true
      x-ms-examples:
        Add properties:
          $ref: "./httpExamples/PullRequestProperties/AddPullRequestProperties.json"
        Remove and replace properties:
          $ref: "./httpExamples/PullRequestProperties/RemoveAndReplacePullRequestProperties.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers:
    get:
      tags:
      - "Pull Request Reviewers"
      description: "Retrieve the reviewers for a pull request"
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IdentityRefWithVote"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "GetPullRequestReviewers"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestReviewers/GET__git_repositories__repositoryId__pullRequests__pullRequestId__reviewers.json"
    post:
      tags:
      - "Pull Request Reviewers"
      description: "Add reviewers to a pull request."
      operationId: "Create Pull Request Reviewers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reviewers to add to the pull request."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/IdentityRef"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IdentityRefWithVote"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "CreatePullRequestReviewers"
      x-ms-preview: true
    patch:
      tags:
      - "Pull Request Reviewers"
      description: "Reset the votes of multiple reviewers on a pull request."
      operationId: "Update"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "IDs of the reviewers whose votes will be reset to zero"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/IdentityRefWithVote"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request"
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "UpdatePullRequestReviewers"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}:
    get:
      tags:
      - "Pull Request Reviewers"
      description: "Retrieve information about a particular reviewer on a pull request"
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "reviewerId"
        in: "path"
        description: "ID of the reviewer."
        required: true
        type: "string"
        x-exportParamName: "ReviewerId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdentityRefWithVote"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "GetPullRequestReviewer"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestReviewers/GET__git_repositories__repositoryId__pullRequests__pullRequestId__reviewers__additionalReviewerId_.json"
    put:
      tags:
      - "Pull Request Reviewers"
      description: "Add a reviewer to a pull request or cast a vote."
      operationId: "Create Pull Request Reviewer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reviewer's vote.<br />If the reviewer's ID is included here,\
          \ it must match the reviewerID parameter.<br />Reviewers can set their own\
          \ vote with this method.  When adding other reviewers, vote must be set\
          \ to zero."
        required: true
        schema:
          $ref: "#/definitions/IdentityRefWithVote"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "reviewerId"
        in: "path"
        description: "ID of the reviewer."
        required: true
        type: "string"
        x-exportParamName: "ReviewerId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IdentityRefWithVote"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "CreatePullRequestReviewer"
      x-ms-preview: true
      x-ms-examples:
        Set vote:
          $ref: "./httpExamples/PullRequestReviewers/PUT__git_repositories__repositoryId__pullRequests__pullRequestId__reviewers__initialReviewerId_.json"
        Add a reviewer:
          $ref: "./httpExamples/PullRequestReviewers/PUT__git_repositories__repositoryId__pullRequests__pullRequestId__reviewers__additionalReviewerId_.json"
    delete:
      tags:
      - "Pull Request Reviewers"
      description: "Remove a reviewer from a pull request."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "reviewerId"
        in: "path"
        description: "ID of the reviewer to remove."
        required: true
        type: "string"
        x-exportParamName: "ReviewerId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestReviewers"
      x-ms-vss-method: "DeletePullRequestReviewer"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestReviewers/DELETE__git_repositories__repositoryId__pullRequests__pullRequestId__reviewers__additionalReviewerId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share:
    post:
      tags:
      - "Pull Request Share"
      description: "Sends an e-mail notification about a specific pull request to\
        \ a set of recipients"
      operationId: "Share Pull Request"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/ShareNotificationContext"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "ID of the git repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestShare"
      x-ms-vss-method: "SharePullRequest"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses:
    get:
      tags:
      - "Pull Request Statuses"
      description: "Get all the statuses associated with a pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestStatuses"
      x-ms-vss-method: "GetPullRequestStatuses"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestStatuses/GET_git_pullRequestStatuses_statuses.json"
    post:
      tags:
      - "Pull Request Statuses"
      description: "Create a pull request status.\n\nThe only required field for the\
        \ status is `Context.Name` that uniquely identifies the status.\nNote that\
        \ you can specify iterationId in the request body to post the status on the\
        \ iteration."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pull request status to create."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequestStatus"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestStatuses"
      x-ms-vss-method: "CreatePullRequestStatus"
      x-ms-preview: true
      x-ms-examples:
        On pull request:
          $ref: "./httpExamples/PullRequestStatuses/POST_git_pullRequestStatuses_status.json"
        On iteration:
          $ref: "./httpExamples/PullRequestStatuses/POST_git_pullRequestStatuses_statusIterationInBody.json"
        With properties:
          $ref: "./httpExamples/PullRequestStatuses/POST_git_pullRequestStatuses_statusWithProperties.json"
    patch:
      tags:
      - "Pull Request Statuses"
      description: "Update pull request statuses collection. The only supported operation\
        \ type is `remove`.\n\nThis operation allows to delete multiple statuses in\
        \ one call.\nThe path of the `remove` operation should refer to the ID of\
        \ the pull request status.\nFor example `path=\"/1\"` refers to the pull request\
        \ status with ID 1."
      operationId: "Update"
      consumes:
      - "application/json-patch+json"
      parameters:
      - in: "body"
        name: "body"
        description: "Operations to apply to the pull request statuses in JSON Patch\
          \ format."
        required: true
        schema:
          $ref: "#/definitions/JsonPatchDocument"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestStatuses"
      x-ms-vss-method: "UpdatePullRequestStatuses"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestStatuses/PATCH_git_pullRequestStatuses_statuses.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}:
    get:
      tags:
      - "Pull Request Statuses"
      description: "Get the specific pull request status by ID. The status ID is unique\
        \ within the pull request across all iterations."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "statusId"
        in: "path"
        description: "ID of the pull request status."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "StatusId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestStatus"
      security:
      - oauth2:
        - "vso.code"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestStatuses"
      x-ms-vss-method: "GetPullRequestStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestStatuses/GET_git_pullRequestStatuses_status.json"
    delete:
      tags:
      - "Pull Request Statuses"
      description: "Delete pull request status.\n\nYou can remove multiple statuses\
        \ in one call by using Update operation."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "statusId"
        in: "path"
        description: "ID of the pull request status."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "StatusId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
        - "vso.code_status"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestStatuses"
      x-ms-vss-method: "DeletePullRequestStatus"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestStatuses/DELETE_git_pullRequestStatuses_status.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads:
    get:
      tags:
      - "Pull Request Threads"
      description: "Retrieve all threads in a pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "$iteration"
        in: "query"
        description: "If specified, thread positions will be tracked using this iteration\
          \ as the right side of the diff."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Iteration"
        x-optionalDataType: "Int32"
      - name: "$baseIteration"
        in: "query"
        description: "If specified, thread positions will be tracked using this iteration\
          \ as the left side of the diff."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "BaseIteration"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequestCommentThread"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreads"
      x-ms-vss-method: "GetThreads"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestThreads/GET__git_repositories__repositoryId__pullRequests__pullRequestId__threads.json"
    post:
      tags:
      - "Pull Request Threads"
      description: "Create a thread in a pull request."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The thread to create. Thread must contain at least one comment."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequestCommentThread"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "Repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestCommentThread"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreads"
      x-ms-vss-method: "CreateThread"
      x-ms-preview: true
      x-ms-examples:
        Comment on the pull request:
          $ref: "./httpExamples/PullRequestThreads/POST__git_repositories__repositoryId__pullRequests__pullRequestId__threads.json"
        Comment on a specific file in the pull request:
          $ref: "./httpExamples/PullRequestThreads/POST__git_repositories__repositoryId__pullRequests__pullRequestId__threads2.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}:
    get:
      tags:
      - "Pull Request Threads"
      description: "Retrieve a thread in a pull request."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "$iteration"
        in: "query"
        description: "If specified, thread position will be tracked using this iteration\
          \ as the right side of the diff."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Iteration"
        x-optionalDataType: "Int32"
      - name: "$baseIteration"
        in: "query"
        description: "If specified, thread position will be tracked using this iteration\
          \ as the left side of the diff."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "BaseIteration"
        x-optionalDataType: "Int32"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestCommentThread"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreads"
      x-ms-vss-method: "GetPullRequestThread"
      x-ms-preview: true
    patch:
      tags:
      - "Pull Request Threads"
      description: "Update a thread in a pull request."
      operationId: "Update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The thread content that should be updated."
        required: true
        schema:
          $ref: "#/definitions/GitPullRequestCommentThread"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request's target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread to update."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPullRequestCommentThread"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreads"
      x-ms-vss-method: "UpdateThread"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments:
    get:
      tags:
      - "Pull Request Thread Comments"
      description: "Retrieve all comments associated with a specific thread in a pull\
        \ request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreadComments"
      x-ms-vss-method: "GetComments"
      x-ms-preview: true
    post:
      tags:
      - "Pull Request Thread Comments"
      description: "Create a comment on a specific thread in a pull request."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The comment to create."
        required: true
        schema:
          $ref: "#/definitions/Comment"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread that the desired comment is in."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreadComments"
      x-ms-vss-method: "CreateComment"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestThreadComments/POST__git_repositories__repositoryId__pullRequests__pullRequestId__threads__threadId__comments.json"
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}:
    get:
      tags:
      - "Pull Request Thread Comments"
      description: "Retrieve a comment associated with a specific thread in a pull\
        \ request."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread that the desired comment is in."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "ID of the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreadComments"
      x-ms-vss-method: "GetComment"
      x-ms-preview: true
    delete:
      tags:
      - "Pull Request Thread Comments"
      description: "Delete a comment associated with a specific thread in a pull request."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread that the desired comment is in."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "ID of the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreadComments"
      x-ms-vss-method: "DeleteComment"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/PullRequestThreadComments/DELETE__git_repositories__repositoryId__pullRequests__pullRequestId__threads__threadId__comments__commentId_.json"
    patch:
      tags:
      - "Pull Request Thread Comments"
      description: "Update a comment associated with a specific thread in a pull request."
      operationId: "Update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The comment content that should be updated."
        required: true
        schema:
          $ref: "#/definitions/Comment"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "ID of the thread that the desired comment is in."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "ID of the comment to update."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestThreadComments"
      x-ms-vss-method: "UpdateComment"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes:
    get:
      tags:
      - "Pull Request Comment Likes"
      description: "Get likes for a comment."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "The ID of the thread that contains the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "The ID of the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IdentityRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestCommentLikes"
      x-ms-vss-method: "GetLikes"
      x-ms-preview: true
    post:
      tags:
      - "Pull Request Comment Likes"
      description: "Add a like on a comment."
      operationId: "Create"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "The ID of the thread that contains the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "The ID of the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestCommentLikes"
      x-ms-vss-method: "CreateLike"
      x-ms-preview: true
    delete:
      tags:
      - "Pull Request Comment Likes"
      description: "Delete a like on a comment."
      operationId: "Delete"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The repository ID of the pull request’s target branch."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "threadId"
        in: "path"
        description: "The ID of the thread that contains the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ThreadId"
      - name: "commentId"
        in: "path"
        description: "The ID of the comment."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "CommentId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestCommentLikes"
      x-ms-vss-method: "DeleteLike"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems:
    get:
      tags:
      - "Pull Request Work Items"
      description: "Retrieve a list of work items associated with a pull request."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID or name of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pullRequestId"
        in: "path"
        description: "ID of the pull request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PullRequestId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ResourceRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "pullRequestWorkItems"
      x-ms-vss-method: "GetPullRequestWorkItemRefs"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/pushes:
    get:
      tags:
      - "Pushes"
      description: "Retrieves pushes associated with the specified repository."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "$skip"
        in: "query"
        description: "Number of pushes to skip."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Skip"
        x-optionalDataType: "Int32"
      - name: "$top"
        in: "query"
        description: "Number of pushes to return."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Top"
        x-optionalDataType: "Int32"
      - name: "searchCriteria.includeLinks"
        in: "query"
        description: "Whether to include the _links field on the shallow references"
        required: false
        type: "boolean"
        x-exportParamName: "SearchCriteriaIncludeLinks"
        x-optionalDataType: "Bool"
      - name: "searchCriteria.includeRefUpdates"
        in: "query"
        description: "Search criteria attributes: fromDate, toDate, pusherId, refName,\
          \ includeRefUpdates or includeLinks. fromDate: Start date to search from.\
          \ toDate: End date to search to. pusherId: Identity of the person who submitted\
          \ the push. refName: Branch name to consider. includeRefUpdates: If true,\
          \ include the list of refs that were updated by the push. includeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: false
        type: "boolean"
        x-exportParamName: "SearchCriteriaIncludeRefUpdates"
        x-optionalDataType: "Bool"
      - name: "searchCriteria.refName"
        in: "query"
        description: "Search criteria attributes: fromDate, toDate, pusherId, refName,\
          \ includeRefUpdates or includeLinks. fromDate: Start date to search from.\
          \ toDate: End date to search to. pusherId: Identity of the person who submitted\
          \ the push. refName: Branch name to consider. includeRefUpdates: If true,\
          \ include the list of refs that were updated by the push. includeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: false
        type: "string"
        x-exportParamName: "SearchCriteriaRefName"
        x-optionalDataType: "String"
      - name: "searchCriteria.pusherId"
        in: "query"
        description: "Search criteria attributes: fromDate, toDate, pusherId, refName,\
          \ includeRefUpdates or includeLinks. fromDate: Start date to search from.\
          \ toDate: End date to search to. pusherId: Identity of the person who submitted\
          \ the push. refName: Branch name to consider. includeRefUpdates: If true,\
          \ include the list of refs that were updated by the push. includeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "SearchCriteriaPusherId"
      - name: "searchCriteria.toDate"
        in: "query"
        description: "Search criteria attributes: fromDate, toDate, pusherId, refName,\
          \ includeRefUpdates or includeLinks. fromDate: Start date to search from.\
          \ toDate: End date to search to. pusherId: Identity of the person who submitted\
          \ the push. refName: Branch name to consider. includeRefUpdates: If true,\
          \ include the list of refs that were updated by the push. includeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "SearchCriteriaToDate"
        x-optionalDataType: "Time"
      - name: "searchCriteria.fromDate"
        in: "query"
        description: "Search criteria attributes: fromDate, toDate, pusherId, refName,\
          \ includeRefUpdates or includeLinks. fromDate: Start date to search from.\
          \ toDate: End date to search to. pusherId: Identity of the person who submitted\
          \ the push. refName: Branch name to consider. includeRefUpdates: If true,\
          \ include the list of refs that were updated by the push. includeLinks:\
          \ Whether to include the _links field on the shallow references."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "SearchCriteriaFromDate"
        x-optionalDataType: "Time"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.2'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitPush"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.2"
      x-ms-vss-resource: "pushes"
      x-ms-vss-method: "GetPushes"
      x-ms-preview: true
      x-ms-examples:
        By repository ID:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes.json"
        In a date range:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes_fromDate-_fromDate__toDate-_toDate_.json"
        By who submitted the pushes:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes_pusherId-_pusherId_.json"
        A page at a time:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes__skip-_skip___top-_top_.json"
        For a particular branch, including ref updates:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes_refName-_refName__includeRefUpdates-true.json"
    post:
      tags:
      - "Pushes"
      description: "Push changes to the repository."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/GitPush"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.2'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPush"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.2"
      x-ms-vss-resource: "pushes"
      x-ms-vss-method: "CreatePush"
      x-ms-preview: true
      x-ms-examples:
        Initial commit (Create a new branch):
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes.json"
        Add a text file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes2.json"
        Add a binary file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes3.json"
        Update a file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes4.json"
        Delete a file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes5.json"
        Rename a file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes6.json"
        Move a file:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes7.json"
        Update a file in a new branch:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes8.json"
        Multiple changes:
          $ref: "./httpExamples/pushes/POST__git_repositories__tempRepoId__pushes9.json"
  /{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}:
    get:
      tags:
      - "Pushes"
      description: "Retrieves a particular push."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "pushId"
        in: "path"
        description: "ID of the push."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "PushId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeCommits"
        in: "query"
        description: "The number of commits to include in the result."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "IncludeCommits"
        x-optionalDataType: "Int32"
      - name: "includeRefUpdates"
        in: "query"
        description: "If true, include the list of refs that were updated by the push."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeRefUpdates"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.2'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitPush"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.2"
      x-ms-vss-resource: "pushes"
      x-ms-vss-method: "GetPush"
      x-ms-preview: true
      x-ms-examples:
        Just the push:
          $ref: "./httpExamples/pushes/GET__git_repositories__repositoryId__pushes__pushId_.json"
  /{project}/_apis/git/repositories/{repositoryId}/refs:
    get:
      tags:
      - "Refs"
      description: "Queries the provided repository for its refs and returns them."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "filter"
        in: "query"
        description: "[optional] A filter to apply to the refs."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "includeLinks"
        in: "query"
        description: "[optional] Specifies if referenceLinks should be included in\
          \ the result. default is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "includeStatuses"
        in: "query"
        description: "[optional] Includes up to the first 1000 commit statuses for\
          \ each ref. The default value is false."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeStatuses"
        x-optionalDataType: "Bool"
      - name: "includeMyBranches"
        in: "query"
        description: "[optional] Includes only branches that the user owns, the branches\
          \ the user favorites, and the default branch. The default value is false.\
          \ Cannot be combined with the filter parameter."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeMyBranches"
        x-optionalDataType: "Bool"
      - name: "latestStatusesOnly"
        in: "query"
        description: "[optional] True to include only the tip commit status for each\
          \ ref. This option requires `includeStatuses` to be true. The default value\
          \ is false."
        required: false
        type: "boolean"
        x-exportParamName: "LatestStatusesOnly"
        x-optionalDataType: "Bool"
      - name: "peelTags"
        in: "query"
        description: "[optional] Annotated tags will populate the PeeledObjectId property.\
          \ default is false."
        required: false
        type: "boolean"
        x-exportParamName: "PeelTags"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refs"
      x-ms-vss-method: "GetRefs"
      x-ms-preview: true
      x-ms-examples:
        Refs:
          $ref: "./httpExamples/refs/GET__git_repositories__repositoryId__refs.json"
        Refs heads:
          $ref: "./httpExamples/refs/GET__git_repositories__repositoryId__refs_heads.json"
        Refs heads statuses:
          $ref: "./httpExamples/refs/GET__git_repositories__repositoryId__refs_heads_statuses.json"
        Refs tags:
          $ref: "./httpExamples/refs/GET__git_repositories__repositoryId__refs_tags.json"
    post:
      tags:
      - "Refs"
      description: "Creating, updating, or deleting refs(branches).\n\nUpdating a\
        \ ref means making it point at a different commit than it used to. You must\
        \ specify both the old and new commit to avoid race conditions."
      operationId: "Update Refs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of ref updates to attempt to perform"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/GitRefUpdate"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "ID or name of the team project. Optional if specifying an ID\
          \ for repository."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitRefUpdateResult"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refs"
      x-ms-vss-method: "UpdateRefs"
      x-ms-preview: true
      x-ms-examples:
        Create/Update/Delete a ref by repositoryId:
          $ref: "./httpExamples/refs/POST__git_repositories__repositoryId__refs.json"
    patch:
      tags:
      - "Refs"
      description: "Lock or Unlock a branch."
      operationId: "Update Ref"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The ref update action (lock/unlock) to perform"
        required: true
        schema:
          $ref: "#/definitions/GitRefUpdate"
        x-exportParamName: "Body"
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "filter"
        in: "query"
        description: "The name of the branch to lock/unlock"
        required: true
        type: "string"
        x-exportParamName: "Filter"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "ID or name of the team project. Optional if specifying an ID\
          \ for repository."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRef"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "refs"
      x-ms-vss-method: "UpdateRef"
      x-ms-preview: true
      x-ms-examples:
        Lock/unlock branch:
          $ref: "./httpExamples/refs/PATCH__git_repositories__repositoryId__refs.json"
  /{project}/_apis/git/repositories/{repositoryId}/reverts:
    get:
      tags:
      - "Reverts"
      description: "Retrieve information about a revert operation for a specific branch."
      operationId: "Get Revert For Ref Name"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "refName"
        in: "query"
        description: "The GitAsyncRefOperationParameters generatedRefName used for\
          \ the revert operation."
        required: true
        type: "string"
        x-exportParamName: "RefName"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRevert"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "reverts"
      x-ms-vss-method: "GetRevertForRefName"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Reverts/GetRevert.json"
    post:
      tags:
      - "Reverts"
      description: "Starts the operation to create a new branch which reverts changes\
        \ introduced by either a specific commit or commits that are associated to\
        \ a pull request."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/GitAsyncRefOperationParameters"
        x-exportParamName: "Body"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRevert"
      security:
      - oauth2:
        - "vso.code_manage"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "reverts"
      x-ms-vss-method: "CreateRevert"
      x-ms-preview: true
      x-ms-examples:
        ?
        : $ref: "./httpExamples/Reverts/CreateRevert.json"
  /{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}:
    get:
      tags:
      - "Reverts"
      description: "Retrieve information about a revert operation by revert Id."
      operationId: "Get Revert"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "revertId"
        in: "path"
        description: "ID of the revert operation."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "RevertId"
      - name: "repositoryId"
        in: "path"
        description: "ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRevert"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "reverts"
      x-ms-vss-method: "GetRevert"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/stats/branches:
    get:
      tags:
      - "Stats"
      description: "Retrieve statistics about all branches within a repository."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "baseVersionDescriptor.versionOptions"
        in: "query"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
        x-exportParamName: "BaseVersionDescriptorVersionOptions"
        x-optionalDataType: "String"
      - name: "baseVersionDescriptor.version"
        in: "query"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
        x-exportParamName: "BaseVersionDescriptorVersion"
        x-optionalDataType: "String"
      - name: "baseVersionDescriptor.versionType"
        in: "query"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
        x-exportParamName: "BaseVersionDescriptorVersionType"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitBranchStats"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "branchStats"
      x-ms-vss-method: "GetBranches"
      x-ms-preview: true
      x-ms-examples:
        For all branches:
          $ref: "./httpExamples/BranchStats/GET__git_repositories__repositoryId__stats_branches.json"
  /{project}/_apis/git/repositories/{repositoryId}/suggestions:
    get:
      tags:
      - "Suggestions"
      description: "Retrieve a pull request suggestion for a particular repository\
        \ or team project."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "ID of the git repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitSuggestion"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "suggestions"
      x-ms-vss-method: "GetSuggestions"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryId}/trees/{sha1}:
    get:
      tags:
      - "Trees"
      description: "The Tree endpoint returns the collection of objects underneath\
        \ the specified tree. Trees are folders in a Git repository.\n\nRepositories\
        \ have both a name and an identifier. Identifiers are globally unique, but\
        \ several projects may contain a repository of the same name. You don't need\
        \ to include the project if you specify a repository by ID. However, if you\
        \ specify a repository by name, you must also specify the project (by name\
        \ or ID."
      operationId: "Get"
      produces:
      - "application/zip"
      - "application/json"
      parameters:
      - name: "repositoryId"
        in: "path"
        description: "Repository Id."
        required: true
        type: "string"
        x-exportParamName: "RepositoryId"
      - name: "sha1"
        in: "path"
        description: "SHA1 hash of the tree object."
        required: true
        type: "string"
        x-exportParamName: "Sha1"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "projectId"
        in: "query"
        description: "Project Id."
        required: false
        type: "string"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "String"
      - name: "recursive"
        in: "query"
        description: "Search recursively. Include trees underneath this tree. Default\
          \ is false."
        required: false
        type: "boolean"
        x-exportParamName: "Recursive"
        x-optionalDataType: "Bool"
      - name: "fileName"
        in: "query"
        description: "Name to use if a .zip file is returned. Default is the object\
          \ ID."
        required: false
        type: "string"
        x-exportParamName: "FileName"
        x-optionalDataType: "String"
      - name: "$format"
        in: "query"
        description: "Use \"zip\". Defaults to the MIME type set in the Accept header."
        required: false
        type: "string"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitTreeRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "trees"
      x-ms-vss-method: "GetTree"
      x-ms-preview: true
      x-ms-examples:
        Non-recursive Example:
          $ref: "./httpExamples/Trees/GET__git_repositories__repositoryId__trees__objectId_.json"
        Recursive Example:
          $ref: "./httpExamples/Trees/GET__git_repositories__repositoryId__trees__objectId__recursive-true.json"
  /{project}/_apis/git/repositories/{repositoryNameOrId}/commits/{commitId}/mergebases:
    get:
      tags:
      - "Merge Bases"
      description: "Find the merge bases of two commits, optionally across forks.\
        \ If otherRepositoryId is not specified, the merge bases will only be calculated\
        \ within the context of the local repositoryNameOrId."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryNameOrId"
        in: "path"
        description: "ID or name of the local repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryNameOrId"
      - name: "commitId"
        in: "path"
        description: "First commit, usually the tip of the target branch of the potential\
          \ merge."
        required: true
        type: "string"
        x-exportParamName: "CommitId"
      - name: "otherCommitId"
        in: "query"
        description: "Other commit, usually the tip of the source branch of the potential\
          \ merge."
        required: true
        type: "string"
        x-exportParamName: "OtherCommitId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "otherCollectionId"
        in: "query"
        description: "The collection ID where otherCommitId lives."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "OtherCollectionId"
      - name: "otherRepositoryId"
        in: "query"
        description: "The repository ID where otherCommitId lives."
        required: false
        type: "string"
        format: "uuid"
        x-exportParamName: "OtherRepositoryId"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "mergeBases"
      x-ms-vss-method: "GetMergeBases"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryNameOrId}/forks/{collectionId}:
    get:
      tags:
      - "Forks"
      description: "Retrieve all forks of a repository in the collection."
      operationId: "List"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryNameOrId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryNameOrId"
      - name: "collectionId"
        in: "path"
        description: "Team project collection ID."
        required: true
        type: "string"
        format: "uuid"
        x-exportParamName: "CollectionId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeLinks"
        in: "query"
        description: "True to include links."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitRepositoryRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "forks"
      x-ms-vss-method: "GetForks"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests:
    get:
      tags:
      - "Forks"
      description: "Retrieve all requested fork sync operations on this repository."
      operationId: "Get Fork Sync Requests"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryNameOrId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryNameOrId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeAbandoned"
        in: "query"
        description: "True to include abandoned requests."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAbandoned"
        x-optionalDataType: "Bool"
      - name: "includeLinks"
        in: "query"
        description: "True to include links."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitForkSyncRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "forkSyncRequests"
      x-ms-vss-method: "GetForkSyncRequests"
      x-ms-preview: true
    post:
      tags:
      - "Forks"
      description: "Request that another repository's refs be fetched into this one."
      operationId: "Create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Source repository and ref mapping."
        required: true
        schema:
          $ref: "#/definitions/GitForkSyncRequestParameters"
        x-exportParamName: "Body"
      - name: "repositoryNameOrId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryNameOrId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeLinks"
        in: "query"
        description: "True to include links"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitForkSyncRequest"
      security:
      - oauth2:
        - "vso.code_write"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "forkSyncRequests"
      x-ms-vss-method: "CreateForkSyncRequest"
      x-ms-preview: true
  /{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}:
    get:
      tags:
      - "Forks"
      description: "Get a specific fork sync operation's details."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - name: "repositoryNameOrId"
        in: "path"
        description: "The name or ID of the repository."
        required: true
        type: "string"
        x-exportParamName: "RepositoryNameOrId"
      - name: "forkSyncOperationId"
        in: "path"
        description: "OperationId of the sync request."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ForkSyncOperationId"
      - name: "project"
        in: "path"
        description: "Project ID or project name"
        required: true
        type: "string"
        x-ms-required: false
        x-exportParamName: "Project"
      - name: "includeLinks"
        in: "query"
        description: "True to include links."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLinks"
        x-optionalDataType: "Bool"
      - name: "api-version"
        in: "query"
        description: "Version of the API to use.  This should be set to '5.0-preview.1'\
          \ to use this version of the api."
        required: true
        type: "string"
        x-exportParamName: "ApiVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitForkSyncRequest"
      security:
      - oauth2:
        - "vso.code"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "forkSyncRequests"
      x-ms-vss-method: "GetForkSyncRequest"
      x-ms-preview: true
securityDefinitions:
  accessToken:
    description: "Personal access token. Use any value for the user name and the token\
      \ as the password."
    type: "basic"
  oauth2:
    type: "oauth2"
    authorizationUrl: "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion"
    tokenUrl: "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer"
    flow: "accessCode"
    scopes:
      vso.code: "Grants the ability to read source code and metadata about commits,\
        \ changesets, branches, and other version control artifacts. Also grants the\
        \ ability to search code and get notified about version control events via\
        \ service hooks."
      vso.code_manage: "Grants the ability to read, update, and delete source code,\
        \ access metadata about commits, changesets, branches, and other version control\
        \ artifacts. Also grants the ability to create and manage code repositories,\
        \ create and manage pull requests and code reviews, and to receive notifications\
        \ about version control events via service hooks."
      vso.code_write: "Grants the ability to read, update, and delete source code,\
        \ access metadata about commits, changesets, branches, and other version control\
        \ artifacts. Also grants the ability to create and manage pull requests and\
        \ code reviews and to receive notifications about version control events via\
        \ service hooks."
      vso.code_status: "Grants the ability to read and write commit and pull request\
        \ status."
definitions:
  AssociatedWorkItem:
    type: "object"
    properties:
      assignedTo:
        type: "string"
      id:
        type: "integer"
        format: "int32"
        description: "Id of associated the work item."
      state:
        type: "string"
      title:
        type: "string"
      url:
        type: "string"
        description: "REST Url of the work item."
      webUrl:
        type: "string"
      workItemType:
        type: "string"
    description: ""
  AsyncGitOperationNotification:
    type: "object"
    properties:
      operationId:
        type: "integer"
        format: "int32"
    description: ""
  AsyncRefOperationCommitLevelEventNotification:
    allOf:
    - $ref: "#/definitions/AsyncGitOperationNotification"
    description: ""
  AsyncRefOperationCompletedNotification:
    allOf:
    - $ref: "#/definitions/AsyncGitOperationNotification"
    description: ""
  AsyncRefOperationConflictNotification:
    allOf:
    - $ref: "#/definitions/AsyncRefOperationCommitLevelEventNotification"
    description: ""
  AsyncRefOperationGeneralFailureNotification:
    allOf:
    - $ref: "#/definitions/AsyncGitOperationNotification"
    description: ""
  AsyncRefOperationProgressNotification:
    allOf:
    - $ref: "#/definitions/AsyncRefOperationCommitLevelEventNotification"
    description: ""
  AsyncRefOperationTimeoutNotification:
    allOf:
    - $ref: "#/definitions/AsyncGitOperationNotification"
    description: ""
  Attachment:
    type: "object"
    properties:
      _links:
        description: "Links to other related objects."
        $ref: "#/definitions/ReferenceLinks"
      author:
        description: "The person that uploaded this attachment."
        $ref: "#/definitions/IdentityRef"
      contentHash:
        type: "string"
        description: "Content hash of on-disk representation of file content. Its\
          \ calculated by the server by using SHA1 hash function."
      createdDate:
        type: "string"
        format: "date-time"
        description: "The time the attachment was uploaded."
      description:
        type: "string"
        description: "The description of the attachment."
      displayName:
        type: "string"
        description: "The display name of the attachment. Can't be null or empty."
      id:
        type: "integer"
        format: "int32"
        description: "Id of the attachment."
      properties:
        description: "Extended properties."
        $ref: "#/definitions/PropertiesCollection"
      url:
        type: "string"
        description: "The url to download the content of the attachment."
    description: "Meta data for a file attached to an artifact."
    example:
      createdDate: "2000-01-23T04:56:07.000+00:00"
      _links:
        links:
          key: "{}"
      author: ""
      displayName: "displayName"
      description: "description"
      id: 0
      properties:
        item: "{}"
        keys:
        - "keys"
        - "keys"
        values:
        - "values"
        - "values"
        count: 6
      url: "url"
      contentHash: "contentHash"
  AutoCompleteUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for an auto-complete update on a pull\
      \ request"
  BranchUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a source/target branch update on a\
      \ pull request"
  Change:
    type: "object"
    properties:
      changeType:
        type: "string"
        description: "The type of change that was made to the item."
        enum:
        - "none"
        - "add"
        - "edit"
        - "encoding"
        - "rename"
        - "delete"
        - "undelete"
        - "branch"
        - "merge"
        - "lock"
        - "rollback"
        - "sourceRename"
        - "targetRename"
        - "property"
        - "all"
        x-ms-enum:
          name: "VersionControlChangeType"
          values:
          - value: "none"
            description: ""
          - value: "add"
            description: ""
          - value: "edit"
            description: ""
          - value: "encoding"
            description: ""
          - value: "rename"
            description: ""
          - value: "delete"
            description: ""
          - value: "undelete"
            description: ""
          - value: "branch"
            description: ""
          - value: "merge"
            description: ""
          - value: "lock"
            description: ""
          - value: "rollback"
            description: ""
          - value: "sourceRename"
            description: ""
          - value: "targetRename"
            description: ""
          - value: "property"
            description: ""
          - value: "all"
            description: ""
      item:
        type: "string"
        format: "T"
        description: "Current version."
      newContent:
        description: "Content of the item after the change."
        $ref: "#/definitions/ItemContent"
      sourceServerItem:
        type: "string"
        description: "Path of the item on the server."
      url:
        type: "string"
        description: "URL to retrieve the item."
    description: ""
  ChangeCountDictionary:
    allOf:
    - type: "object"
      additionalProperties:
        type: "integer"
        format: "int32"
    description: ""
  ChangeList:
    type: "object"
    properties:
      allChangesIncluded:
        type: "boolean"
      changeCounts:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int32"
      changes:
        type: "array"
        items:
          $ref: "#/definitions/Change"
      comment:
        type: "string"
      commentTruncated:
        type: "boolean"
      creationDate:
        type: "string"
        format: "date-time"
      notes:
        type: "array"
        items:
          $ref: "#/definitions/CheckinNote"
      owner:
        type: "string"
      ownerDisplayName:
        type: "string"
      ownerId:
        type: "string"
        format: "uuid"
      sortDate:
        type: "string"
        format: "date-time"
      version:
        type: "string"
    description: ""
  ChangeListSearchCriteria:
    type: "object"
    properties:
      compareVersion:
        type: "string"
        description: "If provided, a version descriptor to compare against base"
      excludeDeletes:
        type: "boolean"
        description: "If true, don't include delete history entries"
      followRenames:
        type: "boolean"
        description: "Whether or not to follow renames for the given item being queried"
      fromDate:
        type: "string"
        description: "If provided, only include history entries created after this\
          \ date (string)"
      fromVersion:
        type: "string"
        description: "If provided, a version descriptor for the earliest change list\
          \ to include"
      itemPath:
        type: "string"
        description: "Path of item to search under. If the itemPaths memebr is used\
          \ then it will take precedence over this."
      itemPaths:
        type: "array"
        description: "List of item paths to search under. If this member is used then\
          \ itemPath will be ignored."
        items:
          type: "string"
      itemVersion:
        type: "string"
        description: "Version of the items to search"
      skip:
        type: "integer"
        format: "int32"
        description: "Number of results to skip (used when clicking more...)"
      toDate:
        type: "string"
        description: "If provided, only include history entries created before this\
          \ date (string)"
      top:
        type: "integer"
        format: "int32"
        description: "If provided, the maximum number of history entries to return"
      toVersion:
        type: "string"
        description: "If provided, a version descriptor for the latest change list\
          \ to include"
      user:
        type: "string"
        description: "Alias or display name of user who made the changes"
    description: "Criteria used in a search for change lists"
  CheckinNote:
    type: "object"
    properties:
      name:
        type: "string"
      value:
        type: "string"
    description: ""
  Comment:
    type: "object"
    properties:
      _links:
        description: "Links to other related objects."
        $ref: "#/definitions/ReferenceLinks"
      author:
        description: "The author of the comment."
        $ref: "#/definitions/IdentityRef"
      commentType:
        type: "string"
        description: "The comment type at the time of creation."
        enum:
        - "unknown"
        - "text"
        - "codeChange"
        - "system"
        x-ms-enum:
          name: "CommentType"
          values:
          - value: "unknown"
            description: "The comment type is not known."
          - value: "text"
            description: "This is a regular user comment."
          - value: "codeChange"
            description: "The comment comes as a result of a code change."
          - value: "system"
            description: "The comment represents a system message."
      content:
        type: "string"
        description: "The comment content."
      id:
        type: "integer"
        format: "int16"
        description: "The comment ID. IDs start at 1 and are unique to a pull request."
      isDeleted:
        type: "boolean"
        description: "Whether or not this comment was soft-deleted."
      lastContentUpdatedDate:
        type: "string"
        format: "date-time"
        description: "The date the comment's content was last updated."
      lastUpdatedDate:
        type: "string"
        format: "date-time"
        description: "The date the comment was last updated."
      parentCommentId:
        type: "integer"
        format: "int16"
        description: "The ID of the parent comment. This is used for replies."
      publishedDate:
        type: "string"
        format: "date-time"
        description: "The date the comment was first published."
      usersLiked:
        type: "array"
        description: "A list of the users who have liked this comment."
        items:
          $ref: "#/definitions/IdentityRef"
    description: "Represents a comment which is one of potentially many in a comment\
      \ thread."
    example:
      lastUpdatedDate: "2000-01-23T04:56:07.000+00:00"
      isDeleted: true
      _links:
        links:
          key: "{}"
      author: ""
      commentType: "unknown"
      lastContentUpdatedDate: "2000-01-23T04:56:07.000+00:00"
      parentCommentId: 6
      id: 0
      publishedDate: "2000-01-23T04:56:07.000+00:00"
      usersLiked:
      - ""
      - ""
      content: "content"
  CommentIterationContext:
    type: "object"
    properties:
      firstComparingIteration:
        type: "integer"
        format: "int16"
        description: "The iteration of the file on the left side of the diff when\
          \ the thread was created. If this value is equal to SecondComparingIteration,\
          \ then this version is the common commit between the source and target branches\
          \ of the pull request."
      secondComparingIteration:
        type: "integer"
        format: "int16"
        description: "The iteration of the file on the right side of the diff when\
          \ the thread was created."
    description: "Comment iteration context is used to identify which diff was being\
      \ viewed when the thread was created."
  CommentPosition:
    type: "object"
    properties:
      line:
        type: "integer"
        format: "int32"
        description: "The line number of a thread's position. Starts at 1."
      offset:
        type: "integer"
        format: "int32"
        description: "The character offset of a thread's position inside of a line.\
          \ Starts at 0."
    description: ""
  CommentThread:
    type: "object"
    properties:
      _links:
        description: "Links to other related objects."
        $ref: "#/definitions/ReferenceLinks"
      comments:
        type: "array"
        description: "A list of the comments."
        items:
          $ref: "#/definitions/Comment"
      id:
        type: "integer"
        format: "int32"
        description: "The comment thread id."
      identities:
        type: "object"
        description: "Set of identities related to this thread"
        additionalProperties:
          $ref: "#/definitions/IdentityRef"
      isDeleted:
        type: "boolean"
        description: "Specify if the thread is deleted which happens when all comments\
          \ are deleted."
      lastUpdatedDate:
        type: "string"
        format: "date-time"
        description: "The time this thread was last updated."
      properties:
        description: "Optional properties associated with the thread as a collection\
          \ of key-value pairs."
        $ref: "#/definitions/PropertiesCollection"
      publishedDate:
        type: "string"
        format: "date-time"
        description: "The time this thread was published."
      status:
        type: "string"
        description: "The status of the comment thread."
        enum:
        - "unknown"
        - "active"
        - "fixed"
        - "wontFix"
        - "closed"
        - "byDesign"
        - "pending"
        x-ms-enum:
          name: "CommentThreadStatus"
          values:
          - value: "unknown"
            description: "The thread status is unknown."
          - value: "active"
            description: "The thread status is active."
          - value: "fixed"
            description: "The thread status is resolved as fixed."
          - value: "wontFix"
            description: "The thread status is resolved as won't fix."
          - value: "closed"
            description: "The thread status is closed."
          - value: "byDesign"
            description: "The thread status is resolved as by design."
          - value: "pending"
            description: "The thread status is pending."
      threadContext:
        description: "Specify thread context such as position in left/right file."
        $ref: "#/definitions/CommentThreadContext"
    description: "Represents a comment thread of a pull request. A thread contains\
      \ meta data about the file it was left on along with one or more comments (an\
      \ initial comment and the subsequent replies)."
  CommentThreadContext:
    type: "object"
    properties:
      filePath:
        type: "string"
        description: "File path relative to the root of the repository. It's up to\
          \ the client to use any path format."
      leftFileEnd:
        description: "Position of last character of the thread's span in left file."
        $ref: "#/definitions/CommentPosition"
      leftFileStart:
        description: "Position of first character of the thread's span in left file."
        $ref: "#/definitions/CommentPosition"
      rightFileEnd:
        description: "Position of last character of the thread's span in right file."
        $ref: "#/definitions/CommentPosition"
      rightFileStart:
        description: "Position of first character of the thread's span in right file."
        $ref: "#/definitions/CommentPosition"
    description: ""
  CommentTrackingCriteria:
    type: "object"
    properties:
      firstComparingIteration:
        type: "integer"
        format: "int32"
        description: "The iteration of the file on the left side of the diff that\
          \ the thread will be tracked to. Threads were tracked if this is greater\
          \ than 0."
      origFilePath:
        type: "string"
        description: "Original filepath the thread was created on before tracking.\
          \ This will be different than the current thread filepath if the file in\
          \ question was renamed in a later iteration."
      origLeftFileEnd:
        description: "Original position of last character of the thread's span in\
          \ left file."
        $ref: "#/definitions/CommentPosition"
      origLeftFileStart:
        description: "Original position of first character of the thread's span in\
          \ left file."
        $ref: "#/definitions/CommentPosition"
      origRightFileEnd:
        description: "Original position of last character of the thread's span in\
          \ right file."
        $ref: "#/definitions/CommentPosition"
      origRightFileStart:
        description: "Original position of first character of the thread's span in\
          \ right file."
        $ref: "#/definitions/CommentPosition"
      secondComparingIteration:
        type: "integer"
        format: "int32"
        description: "The iteration of the file on the right side of the diff that\
          \ the thread will be tracked to. Threads were tracked if this is greater\
          \ than 0."
    description: "Comment tracking criteria is used to identify which iteration context\
      \ the thread has been tracked to (if any) along with some detail about the original\
      \ position and filename."
  CompletionErrorsEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a completion errors on a pull request"
  DiscussionsUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a discussions update on a pull request"
  FileContentMetadata:
    type: "object"
    properties:
      contentType:
        type: "string"
      encoding:
        type: "integer"
        format: "int32"
      extension:
        type: "string"
      fileName:
        type: "string"
      isBinary:
        type: "boolean"
      isImage:
        type: "boolean"
      vsLink:
        type: "string"
    description: ""
  GitAnnotatedTag:
    type: "object"
    properties:
      message:
        type: "string"
        description: "The tagging Message"
      name:
        type: "string"
        description: "The name of the annotated tag."
      objectId:
        type: "string"
        description: "The objectId (Sha1Id) of the tag."
      taggedBy:
        description: "User info and date of tagging."
        $ref: "#/definitions/GitUserDate"
      taggedObject:
        description: "Tagged git object."
        $ref: "#/definitions/GitObject"
      url:
        type: "string"
    description: "A Git annotated tag."
    example:
      taggedBy:
        date: "2000-01-23T04:56:07.000+00:00"
        imageUrl: "imageUrl"
        name: "name"
        email: "email"
      name: "name"
      message: "message"
      taggedObject:
        objectId: "objectId"
        objectType: "bad"
      objectId: "objectId"
      url: "url"
  GitAsyncRefOperation:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      detailedStatus:
        $ref: "#/definitions/GitAsyncRefOperationDetail"
      parameters:
        $ref: "#/definitions/GitAsyncRefOperationParameters"
      status:
        type: "string"
        enum:
        - "queued"
        - "inProgress"
        - "completed"
        - "failed"
        - "abandoned"
        x-ms-enum:
          name: "GitAsyncOperationStatus"
          values:
          - value: "queued"
            description: "The operation is waiting in a queue and has not yet started."
          - value: "inProgress"
            description: "The operation is currently in progress."
          - value: "completed"
            description: "The operation has completed."
          - value: "failed"
            description: "The operation has failed. Check for an error message."
          - value: "abandoned"
            description: "The operation has been abandoned."
      url:
        type: "string"
        description: "A URL that can be used to make further requests for status about\
          \ the operation"
    description: ""
  GitAsyncRefOperationDetail:
    type: "object"
    properties:
      conflict:
        type: "boolean"
        description: "Indicates if there was a conflict generated when trying to cherry\
          \ pick or revert the changes."
      currentCommitId:
        type: "string"
        description: "The current commit from the list of commits that are being cherry\
          \ picked or reverted."
      failureMessage:
        type: "string"
        description: "Detailed information about why the cherry pick or revert failed\
          \ to complete."
      progress:
        type: "number"
        format: "double"
        description: "A number between 0 and 1 indicating the percent complete of\
          \ the operation."
      status:
        type: "string"
        description: "Provides a status code that indicates the reason the cherry\
          \ pick or revert failed."
        enum:
        - "none"
        - "invalidRefName"
        - "refNameConflict"
        - "createBranchPermissionRequired"
        - "writePermissionRequired"
        - "targetBranchDeleted"
        - "gitObjectTooLarge"
        - "operationIndentityNotFound"
        - "asyncOperationNotFound"
        - "other"
        - "emptyCommitterSignature"
        x-ms-enum:
          name: "GitAsyncRefOperationFailureStatus"
          values:
          - value: "none"
            description: "No status"
          - value: "invalidRefName"
            description: "Indicates that the ref update request could not be completed\
              \ because the ref name presented in the request was not valid."
          - value: "refNameConflict"
            description: "The ref update could not be completed because, in case-insensitive\
              \ mode, the ref name conflicts with an existing, differently-cased ref\
              \ name."
          - value: "createBranchPermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks the permission to create a branch"
          - value: "writePermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks write permissions required to write this ref"
          - value: "targetBranchDeleted"
            description: "Target branch was deleted after Git async operation started"
          - value: "gitObjectTooLarge"
            description: "Git object is too large to materialize into memory"
          - value: "operationIndentityNotFound"
            description: "Identity who authorized the operation was not found"
          - value: "asyncOperationNotFound"
            description: "Async operation was not found"
          - value: "other"
            description: "Unexpected failure"
          - value: "emptyCommitterSignature"
            description: "Initiator of async operation has signature with empty name\
              \ or email"
      timedout:
        type: "boolean"
        description: "Indicates if the operation went beyond the maximum time allowed\
          \ for a cherry pick or revert operation."
    description: "Information about the progress of a cherry pick or revert operation."
  GitAsyncRefOperationParameters:
    type: "object"
    properties:
      generatedRefName:
        type: "string"
        description: "Proposed target branch name for the cherry pick or revert operation."
      ontoRefName:
        type: "string"
        description: "The target branch for the cherry pick or revert operation."
      repository:
        description: "The git repository for the cherry pick or revert operation."
        $ref: "#/definitions/GitRepository"
      source:
        description: "Details about the source of the cherry pick or revert operation\
          \ (e.g. A pull request or a specific commit)."
        $ref: "#/definitions/GitAsyncRefOperationSource"
    description: "Parameters that are provided in the request body when requesting\
      \ to cherry pick or revert."
    example:
      ontoRefName: "ontoRefName"
      generatedRefName: "generatedRefName"
      source:
        commitList:
        - _links:
            links:
              key: "{}"
          author:
            date: "2000-01-23T04:56:07.000+00:00"
            imageUrl: "imageUrl"
            name: "name"
            email: "email"
          workItems:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          changes:
          - ""
          - ""
          commitId: "commitId"
          push:
            date: "2000-01-23T04:56:07.000+00:00"
            pushId: 6
            pushedBy: ""
            _links:
              links:
                key: "{}"
            url: "url"
          url: "url"
          commentTruncated: true
          committer:
            date: "2000-01-23T04:56:07.000+00:00"
            imageUrl: "imageUrl"
            name: "name"
            email: "email"
          changeCounts: ""
          statuses:
          - _links:
              links:
                key: "{}"
            createdBy: ""
            context:
              genre: "genre"
              name: "name"
            description: "description"
            id: 1
            state: "notSet"
            updatedDate: "2000-01-23T04:56:07.000+00:00"
            creationDate: "2000-01-23T04:56:07.000+00:00"
            targetUrl: "targetUrl"
          - _links:
              links:
                key: "{}"
            createdBy: ""
            context:
              genre: "genre"
              name: "name"
            description: "description"
            id: 1
            state: "notSet"
            updatedDate: "2000-01-23T04:56:07.000+00:00"
            creationDate: "2000-01-23T04:56:07.000+00:00"
            targetUrl: "targetUrl"
          comment: "comment"
          remoteUrl: "remoteUrl"
          parents:
          - "parents"
          - "parents"
        - _links:
            links:
              key: "{}"
          author:
            date: "2000-01-23T04:56:07.000+00:00"
            imageUrl: "imageUrl"
            name: "name"
            email: "email"
          workItems:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          changes:
          - ""
          - ""
          commitId: "commitId"
          push:
            date: "2000-01-23T04:56:07.000+00:00"
            pushId: 6
            pushedBy: ""
            _links:
              links:
                key: "{}"
            url: "url"
          url: "url"
          commentTruncated: true
          committer:
            date: "2000-01-23T04:56:07.000+00:00"
            imageUrl: "imageUrl"
            name: "name"
            email: "email"
          changeCounts: ""
          statuses:
          - _links:
              links:
                key: "{}"
            createdBy: ""
            context:
              genre: "genre"
              name: "name"
            description: "description"
            id: 1
            state: "notSet"
            updatedDate: "2000-01-23T04:56:07.000+00:00"
            creationDate: "2000-01-23T04:56:07.000+00:00"
            targetUrl: "targetUrl"
          - _links:
              links:
                key: "{}"
            createdBy: ""
            context:
              genre: "genre"
              name: "name"
            description: "description"
            id: 1
            state: "notSet"
            updatedDate: "2000-01-23T04:56:07.000+00:00"
            creationDate: "2000-01-23T04:56:07.000+00:00"
            targetUrl: "targetUrl"
          comment: "comment"
          remoteUrl: "remoteUrl"
          parents:
          - "parents"
          - "parents"
        pullRequestId: 0
      repository:
        size: 5
        _links:
          links:
            key: "{}"
        sshUrl: "sshUrl"
        defaultBranch: "defaultBranch"
        name: "name"
        project:
          visibility: "private"
          name: "name"
          description: "description"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          state: "deleting"
          abbreviation: "abbreviation"
          url: "url"
          revision: 0
        remoteUrl: "remoteUrl"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        parentRepository:
          sshUrl: "sshUrl"
          name: "name"
          project:
            visibility: "private"
            name: "name"
            description: "description"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            state: "deleting"
            abbreviation: "abbreviation"
            url: "url"
            revision: 0
          remoteUrl: "remoteUrl"
          collection:
            name: "name"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          isFork: true
          url: "url"
        isFork: true
        url: "url"
        validRemoteUrls:
        - "validRemoteUrls"
        - "validRemoteUrls"
  GitAsyncRefOperationSource:
    type: "object"
    properties:
      commitList:
        type: "array"
        description: "A list of commits to cherry pick or revert"
        items:
          $ref: "#/definitions/GitCommitRef"
      pullRequestId:
        type: "integer"
        format: "int32"
        description: "Id of the pull request to cherry pick or revert"
    description: "GitAsyncRefOperationSource specifies the pull request or list of\
      \ commits to use when making a cherry pick and revert operation request. Only\
      \ one should be provided."
    example:
      commitList:
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      pullRequestId: 0
  GitBaseVersionDescriptor:
    allOf:
    - $ref: "#/definitions/GitVersionDescriptor"
    description: ""
  GitBlobRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      objectId:
        type: "string"
        description: "SHA1 hash of git object"
      size:
        type: "integer"
        format: "int64"
        description: "Size of blob content (in bytes)"
      url:
        type: "string"
    description: ""
    example:
      size: 0
      _links:
        links:
          key: "{}"
      objectId: "objectId"
      url: "url"
  GitBranchStats:
    type: "object"
    properties:
      aheadCount:
        type: "integer"
        format: "int32"
        description: "Number of commits ahead."
      behindCount:
        type: "integer"
        format: "int32"
        description: "Number of commits behind."
      commit:
        description: "Current commit."
        $ref: "#/definitions/GitCommitRef"
      isBaseVersion:
        type: "boolean"
        description: "True if this is the result for the base version."
      name:
        type: "string"
        description: "Name of the ref."
    description: "Ahead and behind counts for a particular ref."
    example:
      behindCount: 6
      aheadCount: 0
      commit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      name: "name"
      isBaseVersion: true
  GitChange:
    allOf:
    - $ref: "#/definitions/Change"
    description: ""
  GitCherryPick:
    allOf:
    - $ref: "#/definitions/GitAsyncRefOperation"
    description: "This object is returned from Cherry Pick operations and provides\
      \ the id and status of the operation"
  GitCommit:
    allOf:
    - $ref: "#/definitions/GitCommitRef"
    description: ""
  GitCommitChanges:
    type: "object"
    properties:
      changeCounts:
        $ref: "#/definitions/ChangeCountDictionary"
      changes:
        type: "array"
        items:
          $ref: "#/definitions/GitChange"
    description: ""
    example:
      changes:
      - ""
      - ""
      changeCounts: ""
  GitCommitDiffs:
    type: "object"
    properties:
      aheadCount:
        type: "integer"
        format: "int32"
      allChangesIncluded:
        type: "boolean"
      baseCommit:
        type: "string"
      behindCount:
        type: "integer"
        format: "int32"
      changeCounts:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int32"
      changes:
        type: "array"
        items:
          $ref: "#/definitions/GitChange"
      commonCommit:
        type: "string"
      targetCommit:
        type: "string"
    description: ""
    example:
      behindCount: 6
      aheadCount: 0
      baseCommit: "baseCommit"
      changes:
      - ""
      - ""
      changeCounts:
        key: 1
      targetCommit: "targetCommit"
      commonCommit: "commonCommit"
      allChangesIncluded: true
  GitCommitRef:
    type: "object"
    properties:
      _links:
        description: "A collection of related REST reference links."
        $ref: "#/definitions/ReferenceLinks"
      author:
        description: "Author of the commit."
        $ref: "#/definitions/GitUserDate"
      changeCounts:
        description: "Counts of the types of changes (edits, deletes, etc.) included\
          \ with the commit."
        $ref: "#/definitions/ChangeCountDictionary"
      changes:
        type: "array"
        description: "An enumeration of the changes included with the commit."
        items:
          $ref: "#/definitions/GitChange"
      comment:
        type: "string"
        description: "Comment or message of the commit."
      commentTruncated:
        type: "boolean"
        description: "Indicates if the comment is truncated from the full Git commit\
          \ comment message."
      commitId:
        type: "string"
        description: "ID (SHA-1) of the commit."
      committer:
        description: "Committer of the commit."
        $ref: "#/definitions/GitUserDate"
      parents:
        type: "array"
        description: "An enumeration of the parent commit IDs for this commit."
        items:
          type: "string"
      push:
        description: "The push associated with this commit."
        $ref: "#/definitions/GitPushRef"
      remoteUrl:
        type: "string"
        description: "Remote URL path to the commit."
      statuses:
        type: "array"
        description: "A list of status metadata from services and extensions that\
          \ may associate additional information to the commit."
        items:
          $ref: "#/definitions/GitStatus"
      url:
        type: "string"
        description: "REST URL for this resource."
      workItems:
        type: "array"
        description: "A list of workitems associated with this commit."
        items:
          $ref: "#/definitions/ResourceRef"
    description: "Provides properties that describe a Git commit and associated metadata."
    example:
      _links:
        links:
          key: "{}"
      author:
        date: "2000-01-23T04:56:07.000+00:00"
        imageUrl: "imageUrl"
        name: "name"
        email: "email"
      workItems:
      - id: "id"
        url: "url"
      - id: "id"
        url: "url"
      changes:
      - ""
      - ""
      commitId: "commitId"
      push:
        date: "2000-01-23T04:56:07.000+00:00"
        pushId: 6
        pushedBy: ""
        _links:
          links:
            key: "{}"
        url: "url"
      url: "url"
      commentTruncated: true
      committer:
        date: "2000-01-23T04:56:07.000+00:00"
        imageUrl: "imageUrl"
        name: "name"
        email: "email"
      changeCounts: ""
      statuses:
      - _links:
          links:
            key: "{}"
        createdBy: ""
        context:
          genre: "genre"
          name: "name"
        description: "description"
        id: 1
        state: "notSet"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        creationDate: "2000-01-23T04:56:07.000+00:00"
        targetUrl: "targetUrl"
      - _links:
          links:
            key: "{}"
        createdBy: ""
        context:
          genre: "genre"
          name: "name"
        description: "description"
        id: 1
        state: "notSet"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        creationDate: "2000-01-23T04:56:07.000+00:00"
        targetUrl: "targetUrl"
      comment: "comment"
      remoteUrl: "remoteUrl"
      parents:
      - "parents"
      - "parents"
  GitCommitToCreate:
    type: "object"
    properties:
      baseRef:
        $ref: "#/definitions/GitRef"
      comment:
        type: "string"
      pathActions:
        type: "array"
        items:
          $ref: "#/definitions/GitPathAction"
    description: ""
  GitConflict:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      conflictId:
        type: "integer"
        format: "int32"
      conflictPath:
        type: "string"
      conflictType:
        type: "string"
        enum:
        - "none"
        - "addAdd"
        - "addRename"
        - "deleteEdit"
        - "deleteRename"
        - "directoryFile"
        - "directoryChild"
        - "editDelete"
        - "editEdit"
        - "fileDirectory"
        - "rename1to2"
        - "rename2to1"
        - "renameAdd"
        - "renameDelete"
        - "renameRename"
        x-ms-enum:
          name: "GitConflictType"
          values:
          - value: "none"
            description: "No conflict"
          - value: "addAdd"
            description: "Added on source and target; content differs"
          - value: "addRename"
            description: "Added on source and rename destination on target"
          - value: "deleteEdit"
            description: "Deleted on source and edited on target"
          - value: "deleteRename"
            description: "Deleted on source and renamed on target"
          - value: "directoryFile"
            description: "Path is a directory on source and a file on target"
          - value: "directoryChild"
            description: "Children of directory which has DirectoryFile or FileDirectory\
              \ conflict"
          - value: "editDelete"
            description: "Edited on source and deleted on target"
          - value: "editEdit"
            description: "Edited on source and target; content differs"
          - value: "fileDirectory"
            description: "Path is a file on source and a directory on target"
          - value: "rename1to2"
            description: "Same file renamed on both source and target; destination\
              \ paths differ"
          - value: "rename2to1"
            description: "Different files renamed to same destination path on both\
              \ source and target"
          - value: "renameAdd"
            description: "Rename destination on source and new file on target"
          - value: "renameDelete"
            description: "Renamed on source and deleted on target"
          - value: "renameRename"
            description: "Rename destination on both source and target; content differs"
      mergeBaseCommit:
        $ref: "#/definitions/GitCommitRef"
      mergeOrigin:
        $ref: "#/definitions/GitMergeOriginRef"
      mergeSourceCommit:
        $ref: "#/definitions/GitCommitRef"
      mergeTargetCommit:
        $ref: "#/definitions/GitCommitRef"
      resolutionError:
        type: "string"
        enum:
        - "none"
        - "mergeContentNotFound"
        - "pathInUse"
        - "invalidPath"
        - "unknownAction"
        - "unknownMergeType"
        - "otherError"
        x-ms-enum:
          name: "GitResolutionError"
          values:
          - value: "none"
            description: "No error"
          - value: "mergeContentNotFound"
            description: "User set a blob id for resolving a content merge, but blob\
              \ was not found in repo during application"
          - value: "pathInUse"
            description: "Attempted to resolve a conflict by moving a file to another\
              \ path, but path was already in use"
          - value: "invalidPath"
            description: "No error"
          - value: "unknownAction"
            description: "GitResolutionAction was set to an unrecognized value"
          - value: "unknownMergeType"
            description: "GitResolutionMergeType was set to an unrecognized value"
          - value: "otherError"
            description: "Any error for which a more specific code doesn't apply"
      resolutionStatus:
        type: "string"
        enum:
        - "unresolved"
        - "partiallyResolved"
        - "resolved"
        x-ms-enum:
          name: "GitResolutionStatus"
          values:
          - value: "unresolved"
            description: ""
          - value: "partiallyResolved"
            description: ""
          - value: "resolved"
            description: ""
      resolvedBy:
        $ref: "#/definitions/IdentityRef"
      resolvedDate:
        type: "string"
        format: "date-time"
      url:
        type: "string"
    description: ""
  GitConflictAddAdd:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for AddAdd conflict"
  GitConflictAddRename:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for RenameAdd conflict"
  GitConflictDeleteEdit:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for EditDelete conflict"
  GitConflictDeleteRename:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for RenameDelete conflict"
  GitConflictDirectoryFile:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for FileDirectory conflict"
  GitConflictEditDelete:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for DeleteEdit conflict"
  GitConflictEditEdit:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for EditEdit conflict"
  GitConflictFileDirectory:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for DirectoryFile conflict"
  GitConflictRename1to2:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for Rename1to2 conflict"
  GitConflictRename2to1:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for Rename2to1 conflict"
  GitConflictRenameAdd:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for AddRename conflict"
  GitConflictRenameDelete:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for DeleteRename conflict"
  GitConflictRenameRename:
    allOf:
    - $ref: "#/definitions/GitConflict"
    description: "Data object for RenameRename conflict"
  GitConflictUpdateResult:
    type: "object"
    properties:
      conflictId:
        type: "integer"
        format: "int32"
        description: "Conflict ID that was provided by input"
      customMessage:
        type: "string"
        description: "Reason for failing"
      updatedConflict:
        description: "New state of the conflict after updating"
        $ref: "#/definitions/GitConflict"
      updateStatus:
        type: "string"
        description: "Status of the update on the server"
        enum:
        - "succeeded"
        - "badRequest"
        - "invalidResolution"
        - "unsupportedConflictType"
        - "notFound"
        x-ms-enum:
          name: "GitConflictUpdateStatus"
          values:
          - value: "succeeded"
            description: "Indicates that pull request conflict update request was\
              \ completed successfully"
          - value: "badRequest"
            description: "Indicates that the update request did not fit the expected\
              \ data contract"
          - value: "invalidResolution"
            description: "Indicates that the requested resolution was not valid"
          - value: "unsupportedConflictType"
            description: "Indicates that the conflict in the update request was not\
              \ a supported conflict type"
          - value: "notFound"
            description: "Indicates that the conflict could not be found"
    description: ""
  GitDeletedRepository:
    type: "object"
    properties:
      createdDate:
        type: "string"
        format: "date-time"
      deletedBy:
        $ref: "#/definitions/IdentityRef"
      deletedDate:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      project:
        $ref: "#/definitions/TeamProjectReference"
    description: ""
    example:
      createdDate: "2000-01-23T04:56:07.000+00:00"
      deletedDate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      project:
        visibility: "private"
        name: "name"
        description: "description"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        state: "deleting"
        abbreviation: "abbreviation"
        url: "url"
        revision: 0
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      deletedBy: ""
  GitFilePathsCollection:
    type: "object"
    properties:
      commitId:
        type: "string"
      paths:
        type: "array"
        items:
          type: "string"
      url:
        type: "string"
    description: ""
  GitForkOperationStatusDetail:
    type: "object"
    properties:
      allSteps:
        type: "array"
        description: "All valid steps for the forking process"
        items:
          type: "string"
      currentStep:
        type: "integer"
        format: "int32"
        description: "Index into AllSteps for the current step"
      errorMessage:
        type: "string"
        description: "Error message if the operation failed."
    description: "Status information about a requested fork operation."
    example:
      allSteps:
      - "allSteps"
      - "allSteps"
      currentStep: 0
      errorMessage: "errorMessage"
  GitForkRef:
    allOf:
    - $ref: "#/definitions/GitRef"
    description: "Information about a fork ref."
  GitForkSyncRequest:
    type: "object"
    properties:
      _links:
        description: "Collection of related links"
        $ref: "#/definitions/ReferenceLinks"
      detailedStatus:
        $ref: "#/definitions/GitForkOperationStatusDetail"
      operationId:
        type: "integer"
        format: "int32"
        description: "Unique identifier for the operation."
      source:
        description: "Fully-qualified identifier for the source repository."
        $ref: "#/definitions/GlobalGitRepositoryKey"
      sourceToTargetRefs:
        type: "array"
        description: "If supplied, the set of ref mappings to use when performing\
          \ a \"sync\" or create. If missing, all refs will be synchronized."
        items:
          $ref: "#/definitions/SourceToTargetRef"
      status:
        type: "string"
        enum:
        - "queued"
        - "inProgress"
        - "completed"
        - "failed"
        - "abandoned"
        x-ms-enum:
          name: "GitAsyncOperationStatus"
          values:
          - value: "queued"
            description: "The operation is waiting in a queue and has not yet started."
          - value: "inProgress"
            description: "The operation is currently in progress."
          - value: "completed"
            description: "The operation has completed."
          - value: "failed"
            description: "The operation has failed. Check for an error message."
          - value: "abandoned"
            description: "The operation has been abandoned."
    description: "Request to sync data between two forks."
    example:
      detailedStatus:
        allSteps:
        - "allSteps"
        - "allSteps"
        currentStep: 0
        errorMessage: "errorMessage"
      _links:
        links:
          key: "{}"
      operationId: 6
      source:
        repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        collectionId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        projectId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      sourceToTargetRefs:
      - targetRef: "targetRef"
        sourceRef: "sourceRef"
      - targetRef: "targetRef"
        sourceRef: "sourceRef"
      status: "queued"
  GitForkSyncRequestParameters:
    type: "object"
    properties:
      source:
        description: "Fully-qualified identifier for the source repository."
        $ref: "#/definitions/GlobalGitRepositoryKey"
      sourceToTargetRefs:
        type: "array"
        description: "If supplied, the set of ref mappings to use when performing\
          \ a \"sync\" or create. If missing, all refs will be synchronized."
        items:
          $ref: "#/definitions/SourceToTargetRef"
    description: "Parameters for creating a fork request"
    example:
      source:
        repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        collectionId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        projectId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      sourceToTargetRefs:
      - targetRef: "targetRef"
        sourceRef: "sourceRef"
      - targetRef: "targetRef"
        sourceRef: "sourceRef"
  GitForkTeamProjectReference:
    allOf:
    - $ref: "#/definitions/TeamProjectReference"
    description: ""
  GitImportFailedEvent:
    type: "object"
    properties:
      sourceRepositoryName:
        type: "string"
      targetRepository:
        $ref: "#/definitions/GitRepository"
    description: ""
  GitImportGitSource:
    type: "object"
    properties:
      overwrite:
        type: "boolean"
        description: "Tells if this is a sync request or not"
      url:
        type: "string"
        description: "Url for the source repo"
    description: "Parameter for creating a git import request when source is Git version\
      \ control"
    example:
      overwrite: true
      url: "url"
  GitImportRequest:
    type: "object"
    properties:
      _links:
        description: "Links to related resources."
        $ref: "#/definitions/ReferenceLinks"
      detailedStatus:
        description: "Detailed status of the import, including the current step and\
          \ an error message, if applicable."
        $ref: "#/definitions/GitImportStatusDetail"
      importRequestId:
        type: "integer"
        format: "int32"
        description: "The unique identifier for this import request."
      parameters:
        description: "Parameters for creating the import request."
        $ref: "#/definitions/GitImportRequestParameters"
      repository:
        description: "The target repository for this import."
        $ref: "#/definitions/GitRepository"
      status:
        type: "string"
        description: "Current status of the import."
        enum:
        - "queued"
        - "inProgress"
        - "completed"
        - "failed"
        - "abandoned"
        x-ms-enum:
          name: "GitAsyncOperationStatus"
          values:
          - value: "queued"
            description: "The operation is waiting in a queue and has not yet started."
          - value: "inProgress"
            description: "The operation is currently in progress."
          - value: "completed"
            description: "The operation has completed."
          - value: "failed"
            description: "The operation has failed. Check for an error message."
          - value: "abandoned"
            description: "The operation has been abandoned."
      url:
        type: "string"
        description: "A link back to this import request resource."
    description: "A request to import data from a remote source control system."
    example:
      importRequestId: 6
      detailedStatus:
        allSteps:
        - "allSteps"
        - "allSteps"
        currentStep: 0
        errorMessage: "errorMessage"
      _links:
        links:
          key: "{}"
      repository:
        size: 5
        _links:
          links:
            key: "{}"
        sshUrl: "sshUrl"
        defaultBranch: "defaultBranch"
        name: "name"
        project:
          visibility: "private"
          name: "name"
          description: "description"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          state: "deleting"
          abbreviation: "abbreviation"
          url: "url"
          revision: 0
        remoteUrl: "remoteUrl"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        parentRepository:
          sshUrl: "sshUrl"
          name: "name"
          project:
            visibility: "private"
            name: "name"
            description: "description"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            state: "deleting"
            abbreviation: "abbreviation"
            url: "url"
            revision: 0
          remoteUrl: "remoteUrl"
          collection:
            name: "name"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          isFork: true
          url: "url"
        isFork: true
        url: "url"
        validRemoteUrls:
        - "validRemoteUrls"
        - "validRemoteUrls"
      parameters:
        gitSource:
          overwrite: true
          url: "url"
        deleteServiceEndpointAfterImportIsDone: true
        serviceEndpointId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        tfvcSource:
          path: "path"
          importHistoryDurationInDays: 1
          importHistory: true
      url: "url"
      status: "queued"
  GitImportRequestParameters:
    type: "object"
    properties:
      deleteServiceEndpointAfterImportIsDone:
        type: "boolean"
        description: "Option to delete service endpoint when import is done"
      gitSource:
        description: "Source for importing git repository"
        $ref: "#/definitions/GitImportGitSource"
      serviceEndpointId:
        type: "string"
        format: "uuid"
        description: "Service Endpoint for connection to external endpoint"
      tfvcSource:
        description: "Source for importing tfvc repository"
        $ref: "#/definitions/GitImportTfvcSource"
    description: "Parameters for creating an import request"
    example:
      gitSource:
        overwrite: true
        url: "url"
      deleteServiceEndpointAfterImportIsDone: true
      serviceEndpointId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      tfvcSource:
        path: "path"
        importHistoryDurationInDays: 1
        importHistory: true
  GitImportStatusDetail:
    type: "object"
    properties:
      allSteps:
        type: "array"
        description: "All valid steps for the import process"
        items:
          type: "string"
      currentStep:
        type: "integer"
        format: "int32"
        description: "Index into AllSteps for the current step"
      errorMessage:
        type: "string"
        description: "Error message if the operation failed."
    description: "Additional status information about an import request."
    example:
      allSteps:
      - "allSteps"
      - "allSteps"
      currentStep: 0
      errorMessage: "errorMessage"
  GitImportSucceededEvent:
    type: "object"
    properties:
      sourceRepositoryName:
        type: "string"
      targetRepository:
        $ref: "#/definitions/GitRepository"
    description: ""
  GitImportTfvcSource:
    type: "object"
    properties:
      importHistory:
        type: "boolean"
        description: "Set true to import History, false otherwise"
      importHistoryDurationInDays:
        type: "integer"
        format: "int32"
        description: "Get history for last n days (max allowed value is 180 days)"
      path:
        type: "string"
        description: "Path which we want to import (this can be copied from Path Control\
          \ in Explorer)"
    description: "Parameter for creating a git import request when source is tfvc\
      \ version control"
    example:
      path: "path"
      importHistoryDurationInDays: 1
      importHistory: true
  GitItem:
    allOf:
    - $ref: "#/definitions/ItemModel"
    description: ""
  GitItemDescriptor:
    type: "object"
    properties:
      path:
        type: "string"
        description: "Path to item"
      recursionLevel:
        type: "string"
        description: "Specifies whether to include children (OneLevel), all descendants\
          \ (Full), or None"
        enum:
        - "none"
        - "oneLevel"
        - "oneLevelPlusNestedEmptyFolders"
        - "full"
        x-ms-enum:
          name: "VersionControlRecursionType"
          values:
          - value: "none"
            description: "Only return the specified item."
          - value: "oneLevel"
            description: "Return the specified item and its direct children."
          - value: "oneLevelPlusNestedEmptyFolders"
            description: "Return the specified item and its direct children, as well\
              \ as recursive chains of nested child folders that only contain a single\
              \ folder."
          - value: "full"
            description: "Return specified item and all descendants"
      version:
        type: "string"
        description: "Version string (interpretation based on VersionType defined\
          \ in subclass"
      versionOptions:
        type: "string"
        description: "Version modifiers (e.g. previous)"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      versionType:
        type: "string"
        description: "How to interpret version (branch,tag,commit)"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
    description: ""
    example:
      versionType: "branch"
      path: "path"
      recursionLevel: "none"
      versionOptions: "none"
      version: "version"
  GitItemRequestData:
    type: "object"
    properties:
      includeContentMetadata:
        type: "boolean"
        description: "Whether to include metadata for all items"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      itemDescriptors:
        type: "array"
        description: "Collection of items to fetch, including path, version, and recursion\
          \ level"
        items:
          $ref: "#/definitions/GitItemDescriptor"
      latestProcessedChange:
        type: "boolean"
        description: "Whether to include shallow ref to commit that last changed each\
          \ item"
    description: ""
    example:
      itemDescriptors:
      - versionType: "branch"
        path: "path"
        recursionLevel: "none"
        versionOptions: "none"
        version: "version"
      - versionType: "branch"
        path: "path"
        recursionLevel: "none"
        versionOptions: "none"
        version: "version"
      includeContentMetadata: true
      latestProcessedChange: true
      includeLinks: true
  GitLastChangeItem:
    type: "object"
    properties:
      commitId:
        type: "string"
        description: "Gets or sets the commit Id this item was modified most recently\
          \ for the provided version."
      path:
        type: "string"
        description: "Gets or sets the path of the item."
    description: ""
  GitLastChangeTreeItems:
    type: "object"
    properties:
      commits:
        type: "array"
        description: "The list of commits referenced by Items, if they were requested."
        items:
          $ref: "#/definitions/GitCommitRef"
      items:
        type: "array"
        description: "The last change of items."
        items:
          $ref: "#/definitions/GitLastChangeItem"
      lastExploredTime:
        type: "string"
        format: "date-time"
        description: "The last explored time, in case the result is not comprehensive.\
          \ Null otherwise."
    description: ""
  GitMergeOriginRef:
    type: "object"
    properties:
      pullRequestId:
        type: "integer"
        format: "int32"
    description: ""
  GitObject:
    type: "object"
    properties:
      objectId:
        type: "string"
        description: "Object Id (Sha1Id)."
      objectType:
        type: "string"
        description: "Type of object (Commit, Tree, Blob, Tag)"
        enum:
        - "bad"
        - "commit"
        - "tree"
        - "blob"
        - "tag"
        - "ext2"
        - "ofsDelta"
        - "refDelta"
        x-ms-enum:
          name: "GitObjectType"
          values:
          - value: "bad"
            description: ""
          - value: "commit"
            description: ""
          - value: "tree"
            description: ""
          - value: "blob"
            description: ""
          - value: "tag"
            description: ""
          - value: "ext2"
            description: ""
          - value: "ofsDelta"
            description: ""
          - value: "refDelta"
            description: ""
    description: "Git object identifier and type information."
    example:
      objectId: "objectId"
      objectType: "bad"
  GitPathAction:
    type: "object"
    properties:
      action:
        type: "string"
        enum:
        - "none"
        - "edit"
        - "delete"
        - "add"
        - "rename"
        x-ms-enum:
          name: "GitPathActions"
          values:
          - value: "none"
            description: ""
          - value: "edit"
            description: ""
          - value: "delete"
            description: ""
          - value: "add"
            description: ""
          - value: "rename"
            description: ""
      base64Content:
        type: "string"
      path:
        type: "string"
      rawTextContent:
        type: "string"
      targetPath:
        type: "string"
    description: ""
  GitPathToItemsCollection:
    type: "object"
    properties:
      items:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/GitItem"
    description: ""
  GitPullRequest:
    type: "object"
    properties:
      _links:
        description: "Links to other related objects."
        $ref: "#/definitions/ReferenceLinks"
      artifactId:
        type: "string"
        description: "A string which uniquely identifies this pull request. To generate\
          \ an artifact ID for a pull request, use this template: ```vstfs:///Git/PullRequestId/{projectId}/{repositoryId}/{pullRequestId}```"
      autoCompleteSetBy:
        description: "If set, auto-complete is enabled for this pull request and this\
          \ is the identity that enabled it."
        $ref: "#/definitions/IdentityRef"
      closedBy:
        description: "The user who closed the pull request."
        $ref: "#/definitions/IdentityRef"
      closedDate:
        type: "string"
        format: "date-time"
        description: "The date when the pull request was closed (completed, abandoned,\
          \ or merged externally)."
      codeReviewId:
        type: "integer"
        format: "int32"
        description: "The code review ID of the pull request. Used internally."
      commits:
        type: "array"
        description: "The commits contained in the pull request."
        items:
          $ref: "#/definitions/GitCommitRef"
      completionOptions:
        description: "Options which affect how the pull request will be merged when\
          \ it is completed."
        $ref: "#/definitions/GitPullRequestCompletionOptions"
      completionQueueTime:
        type: "string"
        format: "date-time"
        description: "The most recent date at which the pull request entered the queue\
          \ to be completed. Used internally."
      createdBy:
        description: "The identity of the user who created the pull request."
        $ref: "#/definitions/IdentityRef"
      creationDate:
        type: "string"
        format: "date-time"
        description: "The date when the pull request was created."
      description:
        type: "string"
        description: "The description of the pull request."
      forkSource:
        description: "If this is a PR from a fork this will contain information about\
          \ its source."
        $ref: "#/definitions/GitForkRef"
      labels:
        type: "array"
        description: "The labels associated with the pull request."
        items:
          $ref: "#/definitions/WebApiTagDefinition"
      lastMergeCommit:
        description: "The commit of the most recent pull request merge. If empty,\
          \ the most recent merge is in progress or was unsuccessful."
        $ref: "#/definitions/GitCommitRef"
      lastMergeSourceCommit:
        description: "The commit at the head of the source branch at the time of the\
          \ last pull request merge."
        $ref: "#/definitions/GitCommitRef"
      lastMergeTargetCommit:
        description: "The commit at the head of the target branch at the time of the\
          \ last pull request merge."
        $ref: "#/definitions/GitCommitRef"
      mergeFailureMessage:
        type: "string"
        description: "If set, pull request merge failed for this reason."
      mergeFailureType:
        type: "string"
        description: "The type of failure (if any) of the pull request merge."
        enum:
        - "none"
        - "unknown"
        - "caseSensitive"
        - "objectTooLarge"
        x-ms-enum:
          name: "PullRequestMergeFailureType"
          values:
          - value: "none"
            description: "Type is not set. Default type."
          - value: "unknown"
            description: "Pull request merge failure type unknown."
          - value: "caseSensitive"
            description: "Pull request merge failed due to case mismatch."
          - value: "objectTooLarge"
            description: "Pull request merge failed due to an object being too large."
      mergeId:
        type: "string"
        format: "uuid"
        description: "The ID of the job used to run the pull request merge. Used internally."
      mergeOptions:
        description: "Options used when the pull request merge runs. These are separate\
          \ from completion options since completion happens only once and a new merge\
          \ will run every time the source branch of the pull request changes."
        $ref: "#/definitions/GitPullRequestMergeOptions"
      mergeStatus:
        type: "string"
        description: "The current status of the pull request merge."
        enum:
        - "notSet"
        - "queued"
        - "conflicts"
        - "succeeded"
        - "rejectedByPolicy"
        - "failure"
        x-ms-enum:
          name: "PullRequestAsyncStatus"
          values:
          - value: "notSet"
            description: "Status is not set. Default state."
          - value: "queued"
            description: "Pull request merge is queued."
          - value: "conflicts"
            description: "Pull request merge failed due to conflicts."
          - value: "succeeded"
            description: "Pull request merge succeeded."
          - value: "rejectedByPolicy"
            description: "Pull request merge rejected by policy."
          - value: "failure"
            description: "Pull request merge failed."
      pullRequestId:
        type: "integer"
        format: "int32"
        description: "The ID of the pull request."
      remoteUrl:
        type: "string"
        description: "Used internally."
      repository:
        description: "The repository containing the target branch of the pull request."
        $ref: "#/definitions/GitRepository"
      reviewers:
        type: "array"
        description: "A list of reviewers on the pull request along with the state\
          \ of their votes."
        items:
          $ref: "#/definitions/IdentityRefWithVote"
      sourceRefName:
        type: "string"
        description: "The name of the source branch of the pull request."
      status:
        type: "string"
        description: "The status of the pull request."
        enum:
        - "notSet"
        - "active"
        - "abandoned"
        - "completed"
        - "all"
        x-ms-enum:
          name: "PullRequestStatus"
          values:
          - value: "notSet"
            description: "Status not set. Default state."
          - value: "active"
            description: "Pull request is active."
          - value: "abandoned"
            description: "Pull request is abandoned."
          - value: "completed"
            description: "Pull request is completed."
          - value: "all"
            description: "Used in pull request search criterias to include all statuses."
      supportsIterations:
        type: "boolean"
        description: "If true, this pull request supports multiple iterations. Iteration\
          \ support means individual pushes to the source branch of the pull request\
          \ can be reviewed and comments left in one iteration will be tracked across\
          \ future iterations."
      targetRefName:
        type: "string"
        description: "The name of the target branch of the pull request."
      title:
        type: "string"
        description: "The title of the pull request."
      url:
        type: "string"
        description: "Used internally."
      workItemRefs:
        type: "array"
        description: "Any work item references associated with this pull request."
        items:
          $ref: "#/definitions/ResourceRef"
    description: "Represents all the data associated with a pull request."
    example:
      closedBy: ""
      _links:
        links:
          key: "{}"
      lastMergeTargetCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      description: "description"
      lastMergeSourceCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      completionOptions:
        triggeredByAutoComplete: true
        bypassPolicy: true
        transitionWorkItems: true
        squashMerge: true
        bypassReason: "bypassReason"
        mergeCommitMessage: "mergeCommitMessage"
        deleteSourceBranch: true
      pullRequestId: 5
      repository:
        size: 5
        _links:
          links:
            key: "{}"
        sshUrl: "sshUrl"
        defaultBranch: "defaultBranch"
        name: "name"
        project:
          visibility: "private"
          name: "name"
          description: "description"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          state: "deleting"
          abbreviation: "abbreviation"
          url: "url"
          revision: 0
        remoteUrl: "remoteUrl"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        parentRepository:
          sshUrl: "sshUrl"
          name: "name"
          project:
            visibility: "private"
            name: "name"
            description: "description"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            state: "deleting"
            abbreviation: "abbreviation"
            url: "url"
            revision: 0
          remoteUrl: "remoteUrl"
          collection:
            name: "name"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          isFork: true
          url: "url"
        isFork: true
        url: "url"
        validRemoteUrls:
        - "validRemoteUrls"
        - "validRemoteUrls"
      title: "title"
      completionQueueTime: "2000-01-23T04:56:07.000+00:00"
      mergeFailureMessage: "mergeFailureMessage"
      forkSource: ""
      targetRefName: "targetRefName"
      artifactId: "artifactId"
      remoteUrl: "remoteUrl"
      lastMergeCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      mergeId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      autoCompleteSetBy: ""
      sourceRefName: "sourceRefName"
      mergeFailureType: "none"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      reviewers:
      - ""
      - ""
      url: "url"
      labels:
      - name: "name"
        active: true
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        url: "url"
      - name: "name"
        active: true
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        url: "url"
      workItemRefs:
      - id: "id"
        url: "url"
      - id: "id"
        url: "url"
      closedDate: "2000-01-23T04:56:07.000+00:00"
      codeReviewId: 0
      createdBy: ""
      mergeOptions:
        disableRenames: true
        detectRenameFalsePositives: true
      commits:
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      supportsIterations: true
      mergeStatus: "notSet"
      status: "notSet"
  GitPullRequestChange:
    allOf:
    - $ref: "#/definitions/GitChange"
    description: "Change made in a pull request."
  GitPullRequestCommentThread:
    allOf:
    - $ref: "#/definitions/CommentThread"
    description: "Represents a comment thread of a pull request. A thread contains\
      \ meta data about the file it was left on (if any) along with one or more comments\
      \ (an initial comment and the subsequent replies)."
  GitPullRequestCommentThreadContext:
    type: "object"
    properties:
      changeTrackingId:
        type: "integer"
        format: "int32"
        description: "Used to track a comment across iterations. This value can be\
          \ found by looking at the iteration's changes list. Must be set for pull\
          \ requests with iteration support. Otherwise, it's not required for 'legacy'\
          \ pull requests."
      iterationContext:
        description: "The iteration context being viewed when the thread was created."
        $ref: "#/definitions/CommentIterationContext"
      trackingCriteria:
        description: "The criteria used to track this thread. If this property is\
          \ filled out when the thread is returned, then the thread has been tracked\
          \ from its original location using the given criteria."
        $ref: "#/definitions/CommentTrackingCriteria"
    description: "Comment thread context contains details about what diffs were being\
      \ viewed at the time of thread creation and whether or not the thread has been\
      \ tracked from that original diff."
  GitPullRequestCompletionOptions:
    type: "object"
    properties:
      bypassPolicy:
        type: "boolean"
        description: "If true, policies will be explicitly bypassed while the pull\
          \ request is completed."
      bypassReason:
        type: "string"
        description: "If policies are bypassed, this reason is stored as to why bypass\
          \ was used."
      deleteSourceBranch:
        type: "boolean"
        description: "If true, the source branch of the pull request will be deleted\
          \ after completion."
      mergeCommitMessage:
        type: "string"
        description: "If set, this will be used as the commit message of the merge\
          \ commit."
      squashMerge:
        type: "boolean"
        description: "If true, the commits in the pull request will be squash-merged\
          \ into the specified target branch on completion."
      transitionWorkItems:
        type: "boolean"
        description: "If true, we will attempt to transition any work items linked\
          \ to the pull request into the next logical state (i.e. Active -> Resolved)"
      triggeredByAutoComplete:
        type: "boolean"
        description: "If true, the current completion attempt was triggered via auto-complete.\
          \ Used internally."
    description: "Preferences about how the pull request should be completed."
    example:
      triggeredByAutoComplete: true
      bypassPolicy: true
      transitionWorkItems: true
      squashMerge: true
      bypassReason: "bypassReason"
      mergeCommitMessage: "mergeCommitMessage"
      deleteSourceBranch: true
  GitPullRequestIteration:
    type: "object"
    properties:
      _links:
        description: "A collection of related REST reference links."
        $ref: "#/definitions/ReferenceLinks"
      author:
        description: "Author of the pull request iteration."
        $ref: "#/definitions/IdentityRef"
      changeList:
        type: "array"
        description: "Changes included with the pull request iteration."
        items:
          $ref: "#/definitions/GitPullRequestChange"
      commits:
        type: "array"
        description: "The commits included with the pull request iteration."
        items:
          $ref: "#/definitions/GitCommitRef"
      commonRefCommit:
        description: "The first common Git commit of the source and target refs."
        $ref: "#/definitions/GitCommitRef"
      createdDate:
        type: "string"
        format: "date-time"
        description: "The creation date of the pull request iteration."
      description:
        type: "string"
        description: "Description of the pull request iteration."
      hasMoreCommits:
        type: "boolean"
        description: "Indicates if the Commits property contains a truncated list\
          \ of commits in this pull request iteration."
      id:
        type: "integer"
        format: "int32"
        description: "ID of the pull request iteration. Iterations are created as\
          \ a result of creating and pushing updates to a pull request."
      newTargetRefName:
        type: "string"
        description: "If the iteration reason is Retarget, this is the refName of\
          \ the new target"
      push:
        description: "The Git push information associated with this pull request iteration."
        $ref: "#/definitions/GitPushRef"
      reason:
        type: "string"
        description: "The reason for which the pull request iteration was created."
        enum:
        - "push"
        - "forcePush"
        - "create"
        - "rebase"
        - "unknown"
        - "retarget"
        x-ms-enum:
          name: "IterationReason"
          values:
          - value: "push"
            description: ""
          - value: "forcePush"
            description: ""
          - value: "create"
            description: ""
          - value: "rebase"
            description: ""
          - value: "unknown"
            description: ""
          - value: "retarget"
            description: ""
      sourceRefCommit:
        description: "The source Git commit of this iteration."
        $ref: "#/definitions/GitCommitRef"
      targetRefCommit:
        description: "The target Git commit of this iteration."
        $ref: "#/definitions/GitCommitRef"
      updatedDate:
        type: "string"
        format: "date-time"
        description: "The updated date of the pull request iteration."
    description: "Provides properties that describe a Git pull request iteration.\
      \ Iterations are created as a result of creating and pushing updates to a pull\
      \ request."
    example:
      reason: "push"
      _links:
        links:
          key: "{}"
      author: ""
      newTargetRefName: "newTargetRefName"
      changeList:
      - ""
      - ""
      description: "description"
      sourceRefCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      updatedDate: "2000-01-23T04:56:07.000+00:00"
      push:
        date: "2000-01-23T04:56:07.000+00:00"
        pushId: 6
        pushedBy: ""
        _links:
          links:
            key: "{}"
        url: "url"
      hasMoreCommits: true
      targetRefCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      createdDate: "2000-01-23T04:56:07.000+00:00"
      commonRefCommit:
        _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      commits:
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      - _links:
          links:
            key: "{}"
        author:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        workItems:
        - id: "id"
          url: "url"
        - id: "id"
          url: "url"
        changes:
        - ""
        - ""
        commitId: "commitId"
        push:
          date: "2000-01-23T04:56:07.000+00:00"
          pushId: 6
          pushedBy: ""
          _links:
            links:
              key: "{}"
          url: "url"
        url: "url"
        commentTruncated: true
        committer:
          date: "2000-01-23T04:56:07.000+00:00"
          imageUrl: "imageUrl"
          name: "name"
          email: "email"
        changeCounts: ""
        statuses:
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        - _links:
            links:
              key: "{}"
          createdBy: ""
          context:
            genre: "genre"
            name: "name"
          description: "description"
          id: 1
          state: "notSet"
          updatedDate: "2000-01-23T04:56:07.000+00:00"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          targetUrl: "targetUrl"
        comment: "comment"
        remoteUrl: "remoteUrl"
        parents:
        - "parents"
        - "parents"
      id: 0
  GitPullRequestIterationChanges:
    type: "object"
    properties:
      changeEntries:
        type: "array"
        description: "Changes made in the iteration."
        items:
          $ref: "#/definitions/GitPullRequestChange"
      nextSkip:
        type: "integer"
        format: "int32"
        description: "Value to specify as skip to get the next page of changes.  This\
          \ will be zero if there are no more changes."
      nextTop:
        type: "integer"
        format: "int32"
        description: "Value to specify as top to get the next page of changes.  This\
          \ will be zero if there are no more changes."
    description: "Collection of changes made in a pull request."
    example:
      nextSkip: 0
      nextTop: 6
      changeEntries:
      - ""
      - ""
  GitPullRequestMergeOptions:
    type: "object"
    properties:
      detectRenameFalsePositives:
        type: "boolean"
      disableRenames:
        type: "boolean"
        description: "If true, rename detection will not be performed during the merge."
    description: "The options which are used when a pull request merge is created."
    example:
      disableRenames: true
      detectRenameFalsePositives: true
  GitPullRequestQuery:
    type: "object"
    properties:
      queries:
        type: "array"
        description: "The queries to perform."
        items:
          $ref: "#/definitions/GitPullRequestQueryInput"
      results:
        type: "array"
        description: "The results of the queries. This matches the QueryInputs list\
          \ so Results[n] are the results of QueryInputs[n]. Each entry in the list\
          \ is a dictionary of commit->pull requests."
        items:
          type: "object"
          additionalProperties:
            type: "array"
            items:
              $ref: "#/definitions/GitPullRequest"
    description: "A set of pull request queries and their results."
    example:
      queries:
      - type: "notSet"
        items:
        - "items"
        - "items"
      - type: "notSet"
        items:
        - "items"
        - "items"
      results:
      - key:
        - closedBy: ""
          _links:
            links:
              key: "{}"
          lastMergeTargetCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          description: "description"
          lastMergeSourceCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          completionOptions:
            triggeredByAutoComplete: true
            bypassPolicy: true
            transitionWorkItems: true
            squashMerge: true
            bypassReason: "bypassReason"
            mergeCommitMessage: "mergeCommitMessage"
            deleteSourceBranch: true
          pullRequestId: 5
          repository:
            size: 5
            _links:
              links:
                key: "{}"
            sshUrl: "sshUrl"
            defaultBranch: "defaultBranch"
            name: "name"
            project:
              visibility: "private"
              name: "name"
              description: "description"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              state: "deleting"
              abbreviation: "abbreviation"
              url: "url"
              revision: 0
            remoteUrl: "remoteUrl"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            parentRepository:
              sshUrl: "sshUrl"
              name: "name"
              project:
                visibility: "private"
                name: "name"
                description: "description"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                state: "deleting"
                abbreviation: "abbreviation"
                url: "url"
                revision: 0
              remoteUrl: "remoteUrl"
              collection:
                name: "name"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                url: "url"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              isFork: true
              url: "url"
            isFork: true
            url: "url"
            validRemoteUrls:
            - "validRemoteUrls"
            - "validRemoteUrls"
          title: "title"
          completionQueueTime: "2000-01-23T04:56:07.000+00:00"
          mergeFailureMessage: "mergeFailureMessage"
          forkSource: ""
          targetRefName: "targetRefName"
          artifactId: "artifactId"
          remoteUrl: "remoteUrl"
          lastMergeCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          mergeId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          autoCompleteSetBy: ""
          sourceRefName: "sourceRefName"
          mergeFailureType: "none"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          reviewers:
          - ""
          - ""
          url: "url"
          labels:
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          workItemRefs:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          closedDate: "2000-01-23T04:56:07.000+00:00"
          codeReviewId: 0
          createdBy: ""
          mergeOptions:
            disableRenames: true
            detectRenameFalsePositives: true
          commits:
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          supportsIterations: true
          mergeStatus: "notSet"
          status: "notSet"
        - closedBy: ""
          _links:
            links:
              key: "{}"
          lastMergeTargetCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          description: "description"
          lastMergeSourceCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          completionOptions:
            triggeredByAutoComplete: true
            bypassPolicy: true
            transitionWorkItems: true
            squashMerge: true
            bypassReason: "bypassReason"
            mergeCommitMessage: "mergeCommitMessage"
            deleteSourceBranch: true
          pullRequestId: 5
          repository:
            size: 5
            _links:
              links:
                key: "{}"
            sshUrl: "sshUrl"
            defaultBranch: "defaultBranch"
            name: "name"
            project:
              visibility: "private"
              name: "name"
              description: "description"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              state: "deleting"
              abbreviation: "abbreviation"
              url: "url"
              revision: 0
            remoteUrl: "remoteUrl"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            parentRepository:
              sshUrl: "sshUrl"
              name: "name"
              project:
                visibility: "private"
                name: "name"
                description: "description"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                state: "deleting"
                abbreviation: "abbreviation"
                url: "url"
                revision: 0
              remoteUrl: "remoteUrl"
              collection:
                name: "name"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                url: "url"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              isFork: true
              url: "url"
            isFork: true
            url: "url"
            validRemoteUrls:
            - "validRemoteUrls"
            - "validRemoteUrls"
          title: "title"
          completionQueueTime: "2000-01-23T04:56:07.000+00:00"
          mergeFailureMessage: "mergeFailureMessage"
          forkSource: ""
          targetRefName: "targetRefName"
          artifactId: "artifactId"
          remoteUrl: "remoteUrl"
          lastMergeCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          mergeId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          autoCompleteSetBy: ""
          sourceRefName: "sourceRefName"
          mergeFailureType: "none"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          reviewers:
          - ""
          - ""
          url: "url"
          labels:
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          workItemRefs:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          closedDate: "2000-01-23T04:56:07.000+00:00"
          codeReviewId: 0
          createdBy: ""
          mergeOptions:
            disableRenames: true
            detectRenameFalsePositives: true
          commits:
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          supportsIterations: true
          mergeStatus: "notSet"
          status: "notSet"
      - key:
        - closedBy: ""
          _links:
            links:
              key: "{}"
          lastMergeTargetCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          description: "description"
          lastMergeSourceCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          completionOptions:
            triggeredByAutoComplete: true
            bypassPolicy: true
            transitionWorkItems: true
            squashMerge: true
            bypassReason: "bypassReason"
            mergeCommitMessage: "mergeCommitMessage"
            deleteSourceBranch: true
          pullRequestId: 5
          repository:
            size: 5
            _links:
              links:
                key: "{}"
            sshUrl: "sshUrl"
            defaultBranch: "defaultBranch"
            name: "name"
            project:
              visibility: "private"
              name: "name"
              description: "description"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              state: "deleting"
              abbreviation: "abbreviation"
              url: "url"
              revision: 0
            remoteUrl: "remoteUrl"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            parentRepository:
              sshUrl: "sshUrl"
              name: "name"
              project:
                visibility: "private"
                name: "name"
                description: "description"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                state: "deleting"
                abbreviation: "abbreviation"
                url: "url"
                revision: 0
              remoteUrl: "remoteUrl"
              collection:
                name: "name"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                url: "url"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              isFork: true
              url: "url"
            isFork: true
            url: "url"
            validRemoteUrls:
            - "validRemoteUrls"
            - "validRemoteUrls"
          title: "title"
          completionQueueTime: "2000-01-23T04:56:07.000+00:00"
          mergeFailureMessage: "mergeFailureMessage"
          forkSource: ""
          targetRefName: "targetRefName"
          artifactId: "artifactId"
          remoteUrl: "remoteUrl"
          lastMergeCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          mergeId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          autoCompleteSetBy: ""
          sourceRefName: "sourceRefName"
          mergeFailureType: "none"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          reviewers:
          - ""
          - ""
          url: "url"
          labels:
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          workItemRefs:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          closedDate: "2000-01-23T04:56:07.000+00:00"
          codeReviewId: 0
          createdBy: ""
          mergeOptions:
            disableRenames: true
            detectRenameFalsePositives: true
          commits:
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          supportsIterations: true
          mergeStatus: "notSet"
          status: "notSet"
        - closedBy: ""
          _links:
            links:
              key: "{}"
          lastMergeTargetCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          description: "description"
          lastMergeSourceCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          completionOptions:
            triggeredByAutoComplete: true
            bypassPolicy: true
            transitionWorkItems: true
            squashMerge: true
            bypassReason: "bypassReason"
            mergeCommitMessage: "mergeCommitMessage"
            deleteSourceBranch: true
          pullRequestId: 5
          repository:
            size: 5
            _links:
              links:
                key: "{}"
            sshUrl: "sshUrl"
            defaultBranch: "defaultBranch"
            name: "name"
            project:
              visibility: "private"
              name: "name"
              description: "description"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              state: "deleting"
              abbreviation: "abbreviation"
              url: "url"
              revision: 0
            remoteUrl: "remoteUrl"
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            parentRepository:
              sshUrl: "sshUrl"
              name: "name"
              project:
                visibility: "private"
                name: "name"
                description: "description"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                state: "deleting"
                abbreviation: "abbreviation"
                url: "url"
                revision: 0
              remoteUrl: "remoteUrl"
              collection:
                name: "name"
                id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
                url: "url"
              id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
              isFork: true
              url: "url"
            isFork: true
            url: "url"
            validRemoteUrls:
            - "validRemoteUrls"
            - "validRemoteUrls"
          title: "title"
          completionQueueTime: "2000-01-23T04:56:07.000+00:00"
          mergeFailureMessage: "mergeFailureMessage"
          forkSource: ""
          targetRefName: "targetRefName"
          artifactId: "artifactId"
          remoteUrl: "remoteUrl"
          lastMergeCommit:
            _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          mergeId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          autoCompleteSetBy: ""
          sourceRefName: "sourceRefName"
          mergeFailureType: "none"
          creationDate: "2000-01-23T04:56:07.000+00:00"
          reviewers:
          - ""
          - ""
          url: "url"
          labels:
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          - name: "name"
            active: true
            id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            url: "url"
          workItemRefs:
          - id: "id"
            url: "url"
          - id: "id"
            url: "url"
          closedDate: "2000-01-23T04:56:07.000+00:00"
          codeReviewId: 0
          createdBy: ""
          mergeOptions:
            disableRenames: true
            detectRenameFalsePositives: true
          commits:
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          - _links:
              links:
                key: "{}"
            author:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            workItems:
            - id: "id"
              url: "url"
            - id: "id"
              url: "url"
            changes:
            - ""
            - ""
            commitId: "commitId"
            push:
              date: "2000-01-23T04:56:07.000+00:00"
              pushId: 6
              pushedBy: ""
              _links:
                links:
                  key: "{}"
              url: "url"
            url: "url"
            commentTruncated: true
            committer:
              date: "2000-01-23T04:56:07.000+00:00"
              imageUrl: "imageUrl"
              name: "name"
              email: "email"
            changeCounts: ""
            statuses:
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            - _links:
                links:
                  key: "{}"
              createdBy: ""
              context:
                genre: "genre"
                name: "name"
              description: "description"
              id: 1
              state: "notSet"
              updatedDate: "2000-01-23T04:56:07.000+00:00"
              creationDate: "2000-01-23T04:56:07.000+00:00"
              targetUrl: "targetUrl"
            comment: "comment"
            remoteUrl: "remoteUrl"
            parents:
            - "parents"
            - "parents"
          supportsIterations: true
          mergeStatus: "notSet"
          status: "notSet"
  GitPullRequestQueryInput:
    type: "object"
    properties:
      items:
        type: "array"
        description: "The list of commit IDs to search for."
        items:
          type: "string"
      type:
        type: "string"
        description: "The type of query to perform."
        enum:
        - "notSet"
        - "lastMergeCommit"
        - "commit"
        x-ms-enum:
          name: "GitPullRequestQueryType"
          values:
          - value: "notSet"
            description: "No query type set."
          - value: "lastMergeCommit"
            description: "Search for pull requests that created the supplied merge\
              \ commits."
          - value: "commit"
            description: "Search for pull requests that merged the suppliest commits."
    description: "Pull request query input parameters."
    example:
      type: "notSet"
      items:
      - "items"
      - "items"
  GitPullRequestReviewFileContentInfo:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      path:
        type: "string"
        description: "The file change path."
      sHA1Hash:
        type: "string"
        description: "Content hash of on-disk representation of file content. Its\
          \ calculated by the client by using SHA1 hash function. Ensure that uploaded\
          \ file has same encoding as in source control."
    description: ""
  GitPullRequestSearchCriteria:
    type: "object"
    properties:
      creatorId:
        type: "string"
        format: "uuid"
        description: "If set, search for pull requests that were created by this identity."
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      repositoryId:
        type: "string"
        format: "uuid"
        description: "If set, search for pull requests whose target branch is in this\
          \ repository."
      reviewerId:
        type: "string"
        format: "uuid"
        description: "If set, search for pull requests that have this identity as\
          \ a reviewer."
      sourceRefName:
        type: "string"
        description: "If set, search for pull requests from this branch."
      sourceRepositoryId:
        type: "string"
        format: "uuid"
        description: "If set, search for pull requests whose source branch is in this\
          \ repository."
      status:
        type: "string"
        description: "If set, search for pull requests that are in this state. Defaults\
          \ to Active if unset."
        enum:
        - "notSet"
        - "active"
        - "abandoned"
        - "completed"
        - "all"
        x-ms-enum:
          name: "PullRequestStatus"
          values:
          - value: "notSet"
            description: "Status not set. Default state."
          - value: "active"
            description: "Pull request is active."
          - value: "abandoned"
            description: "Pull request is abandoned."
          - value: "completed"
            description: "Pull request is completed."
          - value: "all"
            description: "Used in pull request search criterias to include all statuses."
      targetRefName:
        type: "string"
        description: "If set, search for pull requests into this branch."
    description: "Pull requests can be searched for matching this criteria."
  GitPullRequestStatus:
    allOf:
    - $ref: "#/definitions/GitStatus"
    description: "This class contains the metadata of a service/extension posting\
      \ pull request status. Status can be associated with a pull request or an iteration."
  GitPush:
    allOf:
    - $ref: "#/definitions/GitPushRef"
    description: ""
  GitPushEventData:
    type: "object"
    properties:
      afterId:
        type: "string"
      beforeId:
        type: "string"
      branch:
        type: "string"
      commits:
        type: "array"
        items:
          $ref: "#/definitions/GitCommit"
      repository:
        $ref: "#/definitions/GitRepository"
    description: ""
  GitPushRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      date:
        type: "string"
        format: "date-time"
      pushedBy:
        $ref: "#/definitions/IdentityRef"
      pushId:
        type: "integer"
        format: "int32"
      url:
        type: "string"
    description: ""
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      pushId: 6
      pushedBy: ""
      _links:
        links:
          key: "{}"
      url: "url"
  GitPushSearchCriteria:
    type: "object"
    properties:
      fromDate:
        type: "string"
        format: "date-time"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      includeRefUpdates:
        type: "boolean"
      pusherId:
        type: "string"
        format: "uuid"
      refName:
        type: "string"
      toDate:
        type: "string"
        format: "date-time"
    description: ""
  GitQueryBranchStatsCriteria:
    type: "object"
    properties:
      baseCommit:
        $ref: "#/definitions/GitVersionDescriptor"
      targetCommits:
        type: "array"
        items:
          $ref: "#/definitions/GitVersionDescriptor"
    description: ""
  GitQueryCommitsCriteria:
    type: "object"
    properties:
      $skip:
        type: "integer"
        format: "int32"
        description: "Number of entries to skip"
      $top:
        type: "integer"
        format: "int32"
        description: "Maximum number of entries to retrieve"
      author:
        type: "string"
        description: "Alias or display name of the author"
      compareVersion:
        description: "If provided, the earliest commit in the graph to search"
        $ref: "#/definitions/GitVersionDescriptor"
      excludeDeletes:
        type: "boolean"
        description: "Only applies when an itemPath is specified. This determines\
          \ whether to exclude delete entries of the specified path."
      fromCommitId:
        type: "string"
        description: "If provided, a lower bound for filtering commits alphabetically"
      fromDate:
        type: "string"
        description: "If provided, only include history entries created after this\
          \ date (string)"
      historyMode:
        type: "string"
        description: "What Git history mode should be used. This only applies to the\
          \ search criteria when Ids = null and an itemPath is specified."
        enum:
        - "simplifiedHistory"
        - "firstParent"
        - "fullHistory"
        - "fullHistorySimplifyMerges"
        x-ms-enum:
          name: "GitHistoryMode"
          values:
          - value: "simplifiedHistory"
            description: "The history mode used by `git log`. This is the default."
          - value: "firstParent"
            description: "The history mode used by `git log --first-parent`"
          - value: "fullHistory"
            description: "The history mode used by `git log --full-history`"
          - value: "fullHistorySimplifyMerges"
            description: "The history mode used by `git log --full-history --simplify-merges`"
      ids:
        type: "array"
        description: "If provided, specifies the exact commit ids of the commits to\
          \ fetch. May not be combined with other parameters."
        items:
          type: "string"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      includePushData:
        type: "boolean"
        description: "Whether to include the push information"
      includeUserImageUrl:
        type: "boolean"
        description: "Whether to include the image Url for committers and authors"
      includeWorkItems:
        type: "boolean"
        description: "Whether to include linked work items"
      itemPath:
        type: "string"
        description: "Path of item to search under"
      itemVersion:
        description: "If provided, identifies the commit or branch to search"
        $ref: "#/definitions/GitVersionDescriptor"
      toCommitId:
        type: "string"
        description: "If provided, an upper bound for filtering commits alphabetically"
      toDate:
        type: "string"
        description: "If provided, only include history entries created before this\
          \ date (string)"
      user:
        type: "string"
        description: "Alias or display name of the committer"
    description: ""
    example:
      includePushData: true
      $top: 6
      includeWorkItems: true
      author: "author"
      itemVersion:
        versionType: "branch"
        versionOptions: "none"
        version: "version"
      toDate: "toDate"
      includeLinks: true
      toCommitId: "toCommitId"
      compareVersion:
        versionType: "branch"
        versionOptions: "none"
        version: "version"
      historyMode: "simplifiedHistory"
      fromDate: "fromDate"
      excludeDeletes: true
      $skip: 0
      fromCommitId: "fromCommitId"
      itemPath: "itemPath"
      includeUserImageUrl: true
      ids:
      - "ids"
      - "ids"
      user: "user"
  GitQueryRefsCriteria:
    type: "object"
    properties:
      commitIds:
        type: "array"
        description: "List of commit Ids to be searched"
        items:
          type: "string"
      refNames:
        type: "array"
        description: "List of complete or partial names for refs to be searched"
        items:
          type: "string"
      searchType:
        type: "string"
        description: "Type of search on refNames, if provided"
        enum:
        - "exact"
        - "startsWith"
        - "contains"
        x-ms-enum:
          name: "GitRefSearchType"
          values:
          - value: "exact"
            description: ""
          - value: "startsWith"
            description: ""
          - value: "contains"
            description: ""
    description: ""
  GitRecycleBinRepositoryDetails:
    type: "object"
    properties:
      deleted:
        type: "boolean"
        description: "Setting to false will undo earlier deletion and restore the\
          \ repository."
    description: ""
    example:
      deleted: true
  GitRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      creator:
        $ref: "#/definitions/IdentityRef"
      isLocked:
        type: "boolean"
      isLockedBy:
        $ref: "#/definitions/IdentityRef"
      name:
        type: "string"
      objectId:
        type: "string"
      peeledObjectId:
        type: "string"
      statuses:
        type: "array"
        items:
          $ref: "#/definitions/GitStatus"
      url:
        type: "string"
    description: ""
    example:
      creator: ""
      _links:
        links:
          key: "{}"
      isLockedBy: ""
      isLocked: true
      name: "name"
      statuses:
      - _links:
          links:
            key: "{}"
        createdBy: ""
        context:
          genre: "genre"
          name: "name"
        description: "description"
        id: 1
        state: "notSet"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        creationDate: "2000-01-23T04:56:07.000+00:00"
        targetUrl: "targetUrl"
      - _links:
          links:
            key: "{}"
        createdBy: ""
        context:
          genre: "genre"
          name: "name"
        description: "description"
        id: 1
        state: "notSet"
        updatedDate: "2000-01-23T04:56:07.000+00:00"
        creationDate: "2000-01-23T04:56:07.000+00:00"
        targetUrl: "targetUrl"
      peeledObjectId: "peeledObjectId"
      objectId: "objectId"
      url: "url"
  GitRefFavorite:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      id:
        type: "integer"
        format: "int32"
      identityId:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      repositoryId:
        type: "string"
        format: "uuid"
      type:
        type: "string"
        enum:
        - "invalid"
        - "folder"
        - "ref"
        x-ms-enum:
          name: "RefFavoriteType"
          values:
          - value: "invalid"
            description: ""
          - value: "folder"
            description: ""
          - value: "ref"
            description: ""
      url:
        type: "string"
    description: ""
    example:
      _links:
        links:
          key: "{}"
      identityId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      name: "name"
      repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      id: 0
      type: "invalid"
      url: "url"
  GitRefUpdate:
    type: "object"
    properties:
      isLocked:
        type: "boolean"
      name:
        type: "string"
      newObjectId:
        type: "string"
      oldObjectId:
        type: "string"
      repositoryId:
        type: "string"
        format: "uuid"
    description: ""
    example:
      isLocked: true
      newObjectId: "newObjectId"
      name: "name"
      repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      oldObjectId: "oldObjectId"
  GitRefUpdateResult:
    type: "object"
    properties:
      customMessage:
        type: "string"
        description: "Custom message for the result object For instance, Reason for\
          \ failing."
      isLocked:
        type: "boolean"
        description: "Whether the ref is locked or not"
      name:
        type: "string"
        description: "Ref name"
      newObjectId:
        type: "string"
        description: "New object ID"
      oldObjectId:
        type: "string"
        description: "Old object ID"
      rejectedBy:
        type: "string"
        description: "Name of the plugin that rejected the updated."
      repositoryId:
        type: "string"
        format: "uuid"
        description: "Repository ID"
      success:
        type: "boolean"
        description: "True if the ref update succeeded, false otherwise"
      updateStatus:
        type: "string"
        description: "Status of the update from the TFS server."
        enum:
        - "succeeded"
        - "forcePushRequired"
        - "staleOldObjectId"
        - "invalidRefName"
        - "unprocessed"
        - "unresolvableToCommit"
        - "writePermissionRequired"
        - "manageNotePermissionRequired"
        - "createBranchPermissionRequired"
        - "createTagPermissionRequired"
        - "rejectedByPlugin"
        - "locked"
        - "refNameConflict"
        - "rejectedByPolicy"
        - "succeededNonExistentRef"
        - "succeededCorruptRef"
        x-ms-enum:
          name: "GitRefUpdateStatus"
          values:
          - value: "succeeded"
            description: "Indicates that the ref update request was completed successfully."
          - value: "forcePushRequired"
            description: "Indicates that the ref update request could not be completed\
              \ because part of the graph would be disconnected by this change, and\
              \ the caller does not have ForcePush permission on the repository."
          - value: "staleOldObjectId"
            description: "Indicates that the ref update request could not be completed\
              \ because the old object ID presented in the request was not the object\
              \ ID of the ref when the database attempted the update. The most likely\
              \ scenario is that the caller lost a race to update the ref."
          - value: "invalidRefName"
            description: "Indicates that the ref update request could not be completed\
              \ because the ref name presented in the request was not valid."
          - value: "unprocessed"
            description: "The request was not processed"
          - value: "unresolvableToCommit"
            description: "The ref update request could not be completed because the\
              \ new object ID for the ref could not be resolved to a commit object\
              \ (potentially through any number of tags)"
          - value: "writePermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks write permissions required to write this ref"
          - value: "manageNotePermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks note creation permissions required to write this note"
          - value: "createBranchPermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks the permission to create a branch"
          - value: "createTagPermissionRequired"
            description: "The ref update request could not be completed because the\
              \ user lacks the permission to create a tag"
          - value: "rejectedByPlugin"
            description: "The ref update could not be completed because it was rejected\
              \ by the plugin."
          - value: "locked"
            description: "The ref update could not be completed because the ref is\
              \ locked by another user."
          - value: "refNameConflict"
            description: "The ref update could not be completed because, in case-insensitive\
              \ mode, the ref name conflicts with an existing, differently-cased ref\
              \ name."
          - value: "rejectedByPolicy"
            description: "The ref update could not be completed because it was rejected\
              \ by policy."
          - value: "succeededNonExistentRef"
            description: "Indicates that the ref update request was completed successfully,\
              \ but the ref doesn't actually exist so no changes were made.  This\
              \ should only happen during deletes."
          - value: "succeededCorruptRef"
            description: "Indicates that the ref update request was completed successfully,\
              \ but the passed-in ref was corrupt - as in, the old object ID was bad.\
              \  This should only happen during deletes."
    description: ""
    example:
      rejectedBy: "rejectedBy"
      success: true
      updateStatus: "succeeded"
      isLocked: true
      newObjectId: "newObjectId"
      name: "name"
      repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      customMessage: "customMessage"
      oldObjectId: "oldObjectId"
  GitRepository:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      defaultBranch:
        type: "string"
      id:
        type: "string"
        format: "uuid"
      isFork:
        type: "boolean"
        description: "True if the repository was created as a fork"
      name:
        type: "string"
      parentRepository:
        $ref: "#/definitions/GitRepositoryRef"
      project:
        $ref: "#/definitions/TeamProjectReference"
      remoteUrl:
        type: "string"
      size:
        type: "integer"
        format: "int64"
        description: "Compressed size (bytes) of the repository."
      sshUrl:
        type: "string"
      url:
        type: "string"
      validRemoteUrls:
        type: "array"
        items:
          type: "string"
    description: ""
    example:
      size: 5
      _links:
        links:
          key: "{}"
      sshUrl: "sshUrl"
      defaultBranch: "defaultBranch"
      name: "name"
      project:
        visibility: "private"
        name: "name"
        description: "description"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        state: "deleting"
        abbreviation: "abbreviation"
        url: "url"
        revision: 0
      remoteUrl: "remoteUrl"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      parentRepository:
        sshUrl: "sshUrl"
        name: "name"
        project:
          visibility: "private"
          name: "name"
          description: "description"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          state: "deleting"
          abbreviation: "abbreviation"
          url: "url"
          revision: 0
        remoteUrl: "remoteUrl"
        collection:
          name: "name"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          url: "url"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        isFork: true
        url: "url"
      isFork: true
      url: "url"
      validRemoteUrls:
      - "validRemoteUrls"
      - "validRemoteUrls"
  GitRepositoryCreateOptions:
    type: "object"
    properties:
      name:
        type: "string"
      parentRepository:
        $ref: "#/definitions/GitRepositoryRef"
      project:
        $ref: "#/definitions/TeamProjectReference"
    description: ""
    example:
      name: "name"
      project:
        visibility: "private"
        name: "name"
        description: "description"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        state: "deleting"
        abbreviation: "abbreviation"
        url: "url"
        revision: 0
      parentRepository:
        sshUrl: "sshUrl"
        name: "name"
        project:
          visibility: "private"
          name: "name"
          description: "description"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          state: "deleting"
          abbreviation: "abbreviation"
          url: "url"
          revision: 0
        remoteUrl: "remoteUrl"
        collection:
          name: "name"
          id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
          url: "url"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        isFork: true
        url: "url"
  GitRepositoryRef:
    type: "object"
    properties:
      collection:
        description: "Team Project Collection where this Fork resides"
        $ref: "#/definitions/TeamProjectCollectionReference"
      id:
        type: "string"
        format: "uuid"
      isFork:
        type: "boolean"
        description: "True if the repository was created as a fork"
      name:
        type: "string"
      project:
        $ref: "#/definitions/TeamProjectReference"
      remoteUrl:
        type: "string"
      sshUrl:
        type: "string"
      url:
        type: "string"
    description: ""
    example:
      sshUrl: "sshUrl"
      name: "name"
      project:
        visibility: "private"
        name: "name"
        description: "description"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        state: "deleting"
        abbreviation: "abbreviation"
        url: "url"
        revision: 0
      remoteUrl: "remoteUrl"
      collection:
        name: "name"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        url: "url"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      isFork: true
      url: "url"
  GitRepositoryStats:
    type: "object"
    properties:
      activePullRequestsCount:
        type: "integer"
        format: "int32"
      branchesCount:
        type: "integer"
        format: "int32"
      commitsCount:
        type: "integer"
        format: "int32"
      repositoryId:
        type: "string"
    description: ""
  GitResolutionMergeContent:
    type: "object"
    properties:
      mergeType:
        type: "string"
        enum:
        - "undecided"
        - "takeSourceContent"
        - "takeTargetContent"
        - "autoMerged"
        - "userMerged"
        x-ms-enum:
          name: "GitResolutionMergeType"
          values:
          - value: "undecided"
            description: ""
          - value: "takeSourceContent"
            description: ""
          - value: "takeTargetContent"
            description: ""
          - value: "autoMerged"
            description: ""
          - value: "userMerged"
            description: ""
      userMergedBlob:
        $ref: "#/definitions/GitBlobRef"
      userMergedContent:
        type: "array"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: ""
  GitResolutionPathConflict:
    type: "object"
    properties:
      action:
        type: "string"
        enum:
        - "undecided"
        - "keepSourceRenameTarget"
        - "keepSourceDeleteTarget"
        - "keepTargetRenameSource"
        - "keepTargetDeleteSource"
        x-ms-enum:
          name: "GitResolutionPathConflictAction"
          values:
          - value: "undecided"
            description: ""
          - value: "keepSourceRenameTarget"
            description: ""
          - value: "keepSourceDeleteTarget"
            description: ""
          - value: "keepTargetRenameSource"
            description: ""
          - value: "keepTargetDeleteSource"
            description: ""
      renamePath:
        type: "string"
    description: ""
  GitResolutionPickOneAction:
    type: "object"
    properties:
      action:
        type: "string"
        enum:
        - "undecided"
        - "pickSourceAction"
        - "pickTargetAction"
        x-ms-enum:
          name: "GitResolutionWhichAction"
          values:
          - value: "undecided"
            description: ""
          - value: "pickSourceAction"
            description: ""
          - value: "pickTargetAction"
            description: ""
    description: ""
  GitResolutionRename1to2:
    allOf:
    - $ref: "#/definitions/GitResolutionMergeContent"
    description: ""
  GitRevert:
    allOf:
    - $ref: "#/definitions/GitAsyncRefOperation"
    description: ""
  GitStatus:
    type: "object"
    properties:
      _links:
        description: "Reference links."
        $ref: "#/definitions/ReferenceLinks"
      context:
        description: "Context of the status."
        $ref: "#/definitions/GitStatusContext"
      createdBy:
        description: "Identity that created the status."
        $ref: "#/definitions/IdentityRef"
      creationDate:
        type: "string"
        format: "date-time"
        description: "Creation date and time of the status."
      description:
        type: "string"
        description: "Status description. Typically describes current state of the\
          \ status."
      id:
        type: "integer"
        format: "int32"
        description: "Status identifier."
      state:
        type: "string"
        description: "State of the status."
        enum:
        - "notSet"
        - "pending"
        - "succeeded"
        - "failed"
        - "error"
        - "notApplicable"
        x-ms-enum:
          name: "GitStatusState"
          values:
          - value: "notSet"
            description: "Status state not set. Default state."
          - value: "pending"
            description: "Status pending."
          - value: "succeeded"
            description: "Status succeeded."
          - value: "failed"
            description: "Status failed."
          - value: "error"
            description: "Status with an error."
          - value: "notApplicable"
            description: "Status is not applicable to the target object."
      targetUrl:
        type: "string"
        description: "URL with status details."
      updatedDate:
        type: "string"
        format: "date-time"
        description: "Last update date and time of the status."
    description: "This class contains the metadata of a service/extension posting\
      \ a status."
    example:
      _links:
        links:
          key: "{}"
      createdBy: ""
      context:
        genre: "genre"
        name: "name"
      description: "description"
      id: 1
      state: "notSet"
      updatedDate: "2000-01-23T04:56:07.000+00:00"
      creationDate: "2000-01-23T04:56:07.000+00:00"
      targetUrl: "targetUrl"
  GitStatusContext:
    type: "object"
    properties:
      genre:
        type: "string"
        description: "Genre of the status. Typically name of the service/tool generating\
          \ the status, can be empty."
      name:
        type: "string"
        description: "Name identifier of the status, cannot be null or empty."
    description: "Status context that uniquely identifies the status."
    example:
      genre: "genre"
      name: "name"
  GitSuggestion:
    type: "object"
    properties:
      properties:
        type: "object"
        description: "Specific properties describing the suggestion."
        additionalProperties:
          type: "object"
          properties: {}
      type:
        type: "string"
        description: "The type of suggestion (e.g. pull request)."
    description: "An object describing the git suggestion.  Git suggestions are currently\
      \ limited to suggested pull requests."
    example:
      type: "type"
      properties:
        key: "{}"
  GitTargetVersionDescriptor:
    allOf:
    - $ref: "#/definitions/GitVersionDescriptor"
    description: ""
  GitTemplate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the Template"
      type:
        type: "string"
        description: "Type of the Template"
    description: ""
  GitTreeDiff:
    type: "object"
    properties:
      baseTreeId:
        type: "string"
        description: "ObjectId of the base tree of this diff."
      diffEntries:
        type: "array"
        description: "List of tree entries that differ between the base and target\
          \ tree.  Renames and object type changes are returned as a delete for the\
          \ old object and add for the new object.  If a continuation token is returned\
          \ in the response header, some tree entries are yet to be processed and\
          \ may yeild more diff entries. If the continuation token is not returned\
          \ all the diff entries have been included in this response."
        items:
          $ref: "#/definitions/GitTreeDiffEntry"
      targetTreeId:
        type: "string"
        description: "ObjectId of the target tree of this diff."
      url:
        type: "string"
        description: "REST Url to this resource."
    description: ""
  GitTreeDiffEntry:
    type: "object"
    properties:
      baseObjectId:
        type: "string"
        description: "SHA1 hash of the object in the base tree, if it exists. Will\
          \ be null in case of adds."
      changeType:
        type: "string"
        description: "Type of change that affected this entry."
        enum:
        - "none"
        - "add"
        - "edit"
        - "encoding"
        - "rename"
        - "delete"
        - "undelete"
        - "branch"
        - "merge"
        - "lock"
        - "rollback"
        - "sourceRename"
        - "targetRename"
        - "property"
        - "all"
        x-ms-enum:
          name: "VersionControlChangeType"
          values:
          - value: "none"
            description: ""
          - value: "add"
            description: ""
          - value: "edit"
            description: ""
          - value: "encoding"
            description: ""
          - value: "rename"
            description: ""
          - value: "delete"
            description: ""
          - value: "undelete"
            description: ""
          - value: "branch"
            description: ""
          - value: "merge"
            description: ""
          - value: "lock"
            description: ""
          - value: "rollback"
            description: ""
          - value: "sourceRename"
            description: ""
          - value: "targetRename"
            description: ""
          - value: "property"
            description: ""
          - value: "all"
            description: ""
      objectType:
        type: "string"
        description: "Object type of the tree entry. Blob, Tree or Commit(\"submodule\"\
          )"
        enum:
        - "bad"
        - "commit"
        - "tree"
        - "blob"
        - "tag"
        - "ext2"
        - "ofsDelta"
        - "refDelta"
        x-ms-enum:
          name: "GitObjectType"
          values:
          - value: "bad"
            description: ""
          - value: "commit"
            description: ""
          - value: "tree"
            description: ""
          - value: "blob"
            description: ""
          - value: "tag"
            description: ""
          - value: "ext2"
            description: ""
          - value: "ofsDelta"
            description: ""
          - value: "refDelta"
            description: ""
      path:
        type: "string"
        description: "Relative path in base and target trees."
      targetObjectId:
        type: "string"
        description: "SHA1 hash of the object in the target tree, if it exists. Will\
          \ be null in case of deletes."
    description: ""
  GitTreeDiffResponse:
    type: "object"
    properties:
      continuationToken:
        type: "array"
        description: "The HTTP client methods find the continuation token header in\
          \ the response and populate this field."
        items:
          type: "string"
      treeDiff:
        $ref: "#/definitions/GitTreeDiff"
    description: ""
  GitTreeEntryRef:
    type: "object"
    properties:
      gitObjectType:
        type: "string"
        description: "Blob or tree"
        enum:
        - "bad"
        - "commit"
        - "tree"
        - "blob"
        - "tag"
        - "ext2"
        - "ofsDelta"
        - "refDelta"
        x-ms-enum:
          name: "GitObjectType"
          values:
          - value: "bad"
            description: ""
          - value: "commit"
            description: ""
          - value: "tree"
            description: ""
          - value: "blob"
            description: ""
          - value: "tag"
            description: ""
          - value: "ext2"
            description: ""
          - value: "ofsDelta"
            description: ""
          - value: "refDelta"
            description: ""
      mode:
        type: "string"
        description: "Mode represented as octal string"
      objectId:
        type: "string"
        description: "SHA1 hash of git object"
      relativePath:
        type: "string"
        description: "Path relative to parent tree object"
      size:
        type: "integer"
        format: "int64"
        description: "Size of content"
      url:
        type: "string"
        description: "url to retrieve tree or blob"
    description: ""
    example:
      mode: "mode"
      size: 6
      gitObjectType: "bad"
      relativePath: "relativePath"
      objectId: "objectId"
      url: "url"
  GitTreeRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      objectId:
        type: "string"
        description: "SHA1 hash of git object"
      size:
        type: "integer"
        format: "int64"
        description: "Sum of sizes of all children"
      treeEntries:
        type: "array"
        description: "Blobs and trees under this tree"
        items:
          $ref: "#/definitions/GitTreeEntryRef"
      url:
        type: "string"
        description: "Url to tree"
    description: ""
    example:
      size: 0
      treeEntries:
      - mode: "mode"
        size: 6
        gitObjectType: "bad"
        relativePath: "relativePath"
        objectId: "objectId"
        url: "url"
      - mode: "mode"
        size: 6
        gitObjectType: "bad"
        relativePath: "relativePath"
        objectId: "objectId"
        url: "url"
      _links:
        links:
          key: "{}"
      objectId: "objectId"
      url: "url"
  GitUserDate:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
        description: "Date of the Git operation."
      email:
        type: "string"
        description: "Email address of the user performing the Git operation."
      imageUrl:
        type: "string"
        description: "Url for the user's avatar."
      name:
        type: "string"
        description: "Name of the user performing the Git operation."
    description: "User info and date for Git operations."
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      imageUrl: "imageUrl"
      name: "name"
      email: "email"
  GitVersionDescriptor:
    type: "object"
    properties:
      version:
        type: "string"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
      versionOptions:
        type: "string"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      versionType:
        type: "string"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
    description: ""
    example:
      versionType: "branch"
      versionOptions: "none"
      version: "version"
  GlobalGitRepositoryKey:
    type: "object"
    properties:
      collectionId:
        type: "string"
        format: "uuid"
        description: "Team Project Collection ID of the collection for the repository."
      projectId:
        type: "string"
        format: "uuid"
        description: "Team Project ID of the project for the repository."
      repositoryId:
        type: "string"
        format: "uuid"
        description: "ID of the repository."
    description: "Globally unique key for a repository."
    example:
      repositoryId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      collectionId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      projectId: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  GraphSubjectBase:
    type: "object"
    properties:
      _links:
        description: "This field contains zero or more interesting links about the\
          \ graph subject. These links may be invoked to obtain additional relationships\
          \ or more detailed information about this graph subject."
        $ref: "#/definitions/ReferenceLinks"
      descriptor:
        type: "string"
        description: "The descriptor is the primary way to reference the graph subject\
          \ while the system is running. This field will uniquely identify the same\
          \ graph subject across both Accounts and Organizations."
      displayName:
        type: "string"
        description: "This is the non-unique display name of the graph subject. To\
          \ change this field, you must alter its value in the source provider."
      url:
        type: "string"
        description: "This url is the full route to the source resource of this graph\
          \ subject."
    description: ""
  HistoryEntry:
    type: "object"
    properties:
      changeList:
        description: "The Change list (changeset/commit/shelveset) for this point\
          \ in history"
        $ref: "#/definitions/ChangeList"
      itemChangeType:
        type: "string"
        description: "The change made to the item from this change list (only relevant\
          \ for File history, not folders)"
        enum:
        - "none"
        - "add"
        - "edit"
        - "encoding"
        - "rename"
        - "delete"
        - "undelete"
        - "branch"
        - "merge"
        - "lock"
        - "rollback"
        - "sourceRename"
        - "targetRename"
        - "property"
        - "all"
        x-ms-enum:
          name: "VersionControlChangeType"
          values:
          - value: "none"
            description: ""
          - value: "add"
            description: ""
          - value: "edit"
            description: ""
          - value: "encoding"
            description: ""
          - value: "rename"
            description: ""
          - value: "delete"
            description: ""
          - value: "undelete"
            description: ""
          - value: "branch"
            description: ""
          - value: "merge"
            description: ""
          - value: "lock"
            description: ""
          - value: "rollback"
            description: ""
          - value: "sourceRename"
            description: ""
          - value: "targetRename"
            description: ""
          - value: "property"
            description: ""
          - value: "all"
            description: ""
      serverItem:
        type: "string"
        description: "The path of the item at this point in history (only relevant\
          \ for File history, not folders)"
    description: ""
  IdentityRef:
    allOf:
    - $ref: "#/definitions/GraphSubjectBase"
    description: ""
  IdentityRefWithVote:
    allOf:
    - $ref: "#/definitions/IdentityRef"
    description: "Identity information including a vote on a pull request."
  ImportRepositoryValidation:
    type: "object"
    properties:
      gitSource:
        $ref: "#/definitions/GitImportGitSource"
      password:
        type: "string"
      tfvcSource:
        $ref: "#/definitions/GitImportTfvcSource"
      username:
        type: "string"
    description: ""
  IncludedGitCommit:
    type: "object"
    properties:
      commitId:
        type: "string"
      commitTime:
        type: "string"
        format: "date-time"
      parentCommitIds:
        type: "array"
        items:
          type: "string"
      repositoryId:
        type: "string"
        format: "uuid"
    description: ""
  ItemContent:
    type: "object"
    properties:
      content:
        type: "string"
      contentType:
        type: "string"
        enum:
        - "rawText"
        - "base64Encoded"
        x-ms-enum:
          name: "ItemContentType"
          values:
          - value: "rawText"
            description: ""
          - value: "base64Encoded"
            description: ""
    description: ""
  ItemDetailsOptions:
    type: "object"
    properties:
      includeContentMetadata:
        type: "boolean"
        description: "If true, include metadata about the file type"
      recursionLevel:
        type: "string"
        description: "Specifies whether to include children (OneLevel), all descendants\
          \ (Full) or None for folder items"
        enum:
        - "none"
        - "oneLevel"
        - "oneLevelPlusNestedEmptyFolders"
        - "full"
        x-ms-enum:
          name: "VersionControlRecursionType"
          values:
          - value: "none"
            description: "Only return the specified item."
          - value: "oneLevel"
            description: "Return the specified item and its direct children."
          - value: "oneLevelPlusNestedEmptyFolders"
            description: "Return the specified item and its direct children, as well\
              \ as recursive chains of nested child folders that only contain a single\
              \ folder."
          - value: "full"
            description: "Return specified item and all descendants"
    description: "Optional details to include when returning an item model"
  ItemModel:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      content:
        type: "string"
      contentMetadata:
        $ref: "#/definitions/FileContentMetadata"
      isFolder:
        type: "boolean"
      isSymLink:
        type: "boolean"
      path:
        type: "string"
      url:
        type: "string"
    description: ""
  JsonPatchDocument:
    allOf:
    - type: "array"
      items:
        $ref: "#/definitions/JsonPatchOperation"
    description: "The JSON model for JSON Patch Operations"
  JsonPatchOperation:
    type: "object"
    properties:
      from:
        type: "string"
        description: "The path to copy from for the Move/Copy operation."
      op:
        type: "string"
        description: "The patch operation"
        enum:
        - "add"
        - "remove"
        - "replace"
        - "move"
        - "copy"
        - "test"
        x-ms-enum:
          name: "Operation"
          values:
          - value: "add"
            description: ""
          - value: "remove"
            description: ""
          - value: "replace"
            description: ""
          - value: "move"
            description: ""
          - value: "copy"
            description: ""
          - value: "test"
            description: ""
      path:
        type: "string"
        description: "The path for the operation"
      value:
        type: "object"
        description: "The value for the operation. This is either a primitive or a\
          \ JToken."
        properties: {}
    description: "The JSON model for a JSON Patch operation"
  LabelsUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for updated labels on a pull request"
  MergeCompletedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a merge completed on a pull request"
  PolicyConfiguration:
    allOf:
    - $ref: "#/definitions/VersionedPolicyConfigurationRef"
    description: "The full policy configuration with settings."
  PolicyConfigurationRef:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        description: "The policy configuration ID."
      type:
        description: "The policy configuration type."
        $ref: "#/definitions/PolicyTypeRef"
      url:
        type: "string"
        description: "The URL where the policy configuration can be retrieved."
    description: "Policy configuration reference."
  PolicyEvaluationUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a policy evaluation update on a pull\
      \ request"
  PolicyTypeRef:
    type: "object"
    properties:
      displayName:
        type: "string"
        description: "Display name of the policy type."
      id:
        type: "string"
        format: "uuid"
        description: "The policy type ID."
      url:
        type: "string"
        description: "The URL where the policy type can be retrieved."
    description: "Policy type reference."
  PropertiesCollection:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
        description: "The count of properties in the collection."
      item:
        type: "object"
        properties: {}
      keys:
        type: "array"
        description: "The set of keys in the collection."
        items:
          type: "string"
      values:
        type: "array"
        description: "The set of values in the collection."
        items:
          type: "string"
    description: "The class represents a property bag as a collection of key-value\
      \ pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`)\
      \ except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType\
      \ and String preserve their type, other primitives are retuned as a String.\
      \ Byte[] expected as base64 encoded string."
    example:
      item: "{}"
      keys:
      - "keys"
      - "keys"
      values:
      - "values"
      - "values"
      count: 6
  PullRequestCreatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for pull request creation"
  PullRequestTabExtensionConfig:
    type: "object"
    properties:
      pullRequestId:
        type: "integer"
        format: "int32"
      repositoryId:
        type: "string"
    description: "Initial config contract sent to extensions creating tabs on the\
      \ pull request page"
  RealTimePullRequestEvent:
    type: "object"
    properties:
      eventId:
        type: "string"
        format: "uuid"
        description: "The id of this event. Can be used to track send/receive state\
          \ between client and server."
      pullRequestId:
        type: "integer"
        format: "int32"
        description: "The id of the pull request this event was generated for."
    description: "Base contract for a real time pull request event (SignalR)"
  ReferenceLinks:
    type: "object"
    properties:
      links:
        type: "object"
        description: "The readonly view of the links.  Because Reference links are\
          \ readonly, we only want to expose them as read only."
        additionalProperties:
          type: "object"
          properties: {}
    description: "The class to represent a collection of REST reference links."
    example:
      links:
        key: "{}"
  ResourceRef:
    type: "object"
    properties:
      id:
        type: "string"
      url:
        type: "string"
    description: ""
    example:
      id: "id"
      url: "url"
  RetargetEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for when the target branch of a pull request\
      \ is changed"
  ReviewersUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for an update to reviewers on a pull request"
  ReviewersVotesResetEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for reviewer votes being reset on a pull\
      \ request"
  ReviewerVoteUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a reviewer vote update on a pull request"
  ShareNotificationContext:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Optional user note or message."
      receivers:
        type: "array"
        description: "Identities of users who will receive a share notification."
        items:
          $ref: "#/definitions/IdentityRef"
    description: "Context used while sharing a pull request."
    example:
      receivers:
      - ""
      - ""
      message: "message"
  SourceToTargetRef:
    type: "object"
    properties:
      sourceRef:
        type: "string"
        description: "The source ref to copy. For example, refs/heads/master."
      targetRef:
        type: "string"
        description: "The target ref to update. For example, refs/heads/master."
    description: ""
    example:
      targetRef: "targetRef"
      sourceRef: "sourceRef"
  StatusAddedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for an added status on a pull request"
  StatusesDeletedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for deleted statuses on a pull request"
  StatusUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a status update on a pull request"
  SupportedIde:
    type: "object"
    properties:
      downloadUrl:
        type: "string"
        description: "The download URL for the IDE."
      ideType:
        type: "string"
        description: "The type of the IDE."
        enum:
        - "unknown"
        - "androidStudio"
        - "appCode"
        - "cLion"
        - "dataGrip"
        - "eclipse"
        - "intelliJ"
        - "mPS"
        - "phpStorm"
        - "pyCharm"
        - "rubyMine"
        - "tower"
        - "visualStudio"
        - "vSCode"
        - "webStorm"
        x-ms-enum:
          name: "SupportedIdeType"
          values:
          - value: "unknown"
            description: ""
          - value: "androidStudio"
            description: ""
          - value: "appCode"
            description: ""
          - value: "cLion"
            description: ""
          - value: "dataGrip"
            description: ""
          - value: "eclipse"
            description: ""
          - value: "intelliJ"
            description: ""
          - value: "mPS"
            description: ""
          - value: "phpStorm"
            description: ""
          - value: "pyCharm"
            description: ""
          - value: "rubyMine"
            description: ""
          - value: "tower"
            description: ""
          - value: "visualStudio"
            description: ""
          - value: "vSCode"
            description: ""
          - value: "webStorm"
            description: ""
      name:
        type: "string"
        description: "The name of the IDE."
      protocolHandlerUrl:
        type: "string"
        description: "The URL to open the protocol handler for the IDE."
      supportedPlatforms:
        type: "array"
        description: "A list of SupportedPlatforms."
        items:
          type: "string"
    description: "Represents a Supported IDE entity."
  TeamProjectCollectionReference:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "Collection Id."
      name:
        type: "string"
        description: "Collection Name."
      url:
        type: "string"
        description: "Collection REST Url."
    description: "Reference object for a TeamProjectCollection."
    example:
      name: "name"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      url: "url"
  TeamProjectReference:
    type: "object"
    properties:
      abbreviation:
        type: "string"
        description: "Project abbreviation."
      description:
        type: "string"
        description: "The project's description (if any)."
      id:
        type: "string"
        format: "uuid"
        description: "Project identifier."
      name:
        type: "string"
        description: "Project name."
      revision:
        type: "integer"
        format: "int64"
        description: "Project revision."
      state:
        type: "string"
        description: "Project state."
        enum:
        - "deleting"
        - "new"
        - "wellFormed"
        - "createPending"
        - "all"
        - "unchanged"
        - "deleted"
        x-ms-enum:
          name: "ProjectState"
          values:
          - value: "deleting"
            description: "Project is in the process of being deleted."
          - value: "new"
            description: "Project is in the process of being created."
          - value: "wellFormed"
            description: "Project is completely created and ready to use."
          - value: "createPending"
            description: "Project has been queued for creation, but the process has\
              \ not yet started."
          - value: "all"
            description: "All projects regardless of state."
          - value: "unchanged"
            description: "Project has not been changed."
          - value: "deleted"
            description: "Project has been deleted."
      url:
        type: "string"
        description: "Url to the full version of the object."
      visibility:
        type: "string"
        description: "Project visibility."
        enum:
        - "private"
        - "public"
        x-ms-enum:
          name: "ProjectVisibility"
          values:
          - value: "private"
            description: ""
          - value: "public"
            description: ""
    description: "Represents a shallow reference to a TeamProject."
    example:
      visibility: "private"
      name: "name"
      description: "description"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      state: "deleting"
      abbreviation: "abbreviation"
      url: "url"
      revision: 0
  TfvcBranch:
    allOf:
    - $ref: "#/definitions/TfvcBranchRef"
    description: ""
  TfvcBranchMapping:
    type: "object"
    properties:
      depth:
        type: "string"
        description: "Depth of the branch."
      serverItem:
        type: "string"
        description: "Server item for the branch."
      type:
        type: "string"
        description: "Type of the branch."
    description: ""
  TfvcBranchRef:
    allOf:
    - $ref: "#/definitions/TfvcShallowBranchRef"
    description: ""
  TfvcChange:
    allOf:
    - $ref: "#/definitions/Change"
    description: ""
  TfvcChangeset:
    allOf:
    - $ref: "#/definitions/TfvcChangesetRef"
    description: ""
  TfvcChangesetRef:
    type: "object"
    properties:
      _links:
        description: "A collection of REST reference links."
        $ref: "#/definitions/ReferenceLinks"
      author:
        description: "Alias or display name of user"
        $ref: "#/definitions/IdentityRef"
      changesetId:
        type: "integer"
        format: "int32"
        description: "Id of the changeset."
      checkedInBy:
        description: "Alias or display name of user"
        $ref: "#/definitions/IdentityRef"
      comment:
        type: "string"
        description: "Comment for the changeset."
      commentTruncated:
        type: "boolean"
        description: "Was the Comment result truncated?"
      createdDate:
        type: "string"
        format: "date-time"
        description: "Creation date of the changeset."
      url:
        type: "string"
        description: "URL to retrieve the item."
    description: ""
  TfvcChangesetSearchCriteria:
    type: "object"
    properties:
      author:
        type: "string"
        description: "Alias or display name of user who made the changes"
      followRenames:
        type: "boolean"
        description: "Whether or not to follow renames for the given item being queried"
      fromDate:
        type: "string"
        description: "If provided, only include changesets created after this date\
          \ (string) Think of a better name for this."
      fromId:
        type: "integer"
        format: "int32"
        description: "If provided, only include changesets after this changesetID"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      itemPath:
        type: "string"
        description: "Path of item to search under"
      mappings:
        type: "array"
        items:
          $ref: "#/definitions/TfvcMappingFilter"
      toDate:
        type: "string"
        description: "If provided, only include changesets created before this date\
          \ (string) Think of a better name for this."
      toId:
        type: "integer"
        format: "int32"
        description: "If provided, a version descriptor for the latest change list\
          \ to include"
    description: "Criteria used in a search for change lists"
  TfvcChangesetsRequestData:
    type: "object"
    properties:
      changesetIds:
        type: "array"
        description: "List of changeset Ids."
        items:
          type: "integer"
          format: "int32"
      commentLength:
        type: "integer"
        format: "int32"
        description: "Length of the comment."
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
    description: ""
  TfvcCheckinEventData:
    type: "object"
    properties:
      changeset:
        $ref: "#/definitions/TfvcChangeset"
      project:
        $ref: "#/definitions/TeamProjectReference"
    description: ""
  TfvcHistoryEntry:
    allOf:
    - $ref: "#/definitions/HistoryEntry"
    description: ""
  TfvcItem:
    allOf:
    - $ref: "#/definitions/ItemModel"
    description: ""
  TfvcItemDescriptor:
    type: "object"
    properties:
      path:
        type: "string"
      recursionLevel:
        type: "string"
        enum:
        - "none"
        - "oneLevel"
        - "oneLevelPlusNestedEmptyFolders"
        - "full"
        x-ms-enum:
          name: "VersionControlRecursionType"
          values:
          - value: "none"
            description: "Only return the specified item."
          - value: "oneLevel"
            description: "Return the specified item and its direct children."
          - value: "oneLevelPlusNestedEmptyFolders"
            description: "Return the specified item and its direct children, as well\
              \ as recursive chains of nested child folders that only contain a single\
              \ folder."
          - value: "full"
            description: "Return specified item and all descendants"
      version:
        type: "string"
      versionOption:
        type: "string"
        enum:
        - "none"
        - "previous"
        - "useRename"
        x-ms-enum:
          name: "TfvcVersionOption"
          values:
          - value: "none"
            description: ""
          - value: "previous"
            description: ""
          - value: "useRename"
            description: ""
      versionType:
        type: "string"
        enum:
        - "none"
        - "changeset"
        - "shelveset"
        - "change"
        - "date"
        - "latest"
        - "tip"
        - "mergeSource"
        x-ms-enum:
          name: "TfvcVersionType"
          values:
          - value: "none"
            description: ""
          - value: "changeset"
            description: ""
          - value: "shelveset"
            description: ""
          - value: "change"
            description: ""
          - value: "date"
            description: ""
          - value: "latest"
            description: ""
          - value: "tip"
            description: ""
          - value: "mergeSource"
            description: ""
    description: "Item path and Version descriptor properties"
  TfvcItemPreviousHash:
    allOf:
    - $ref: "#/definitions/TfvcItem"
    description: ""
  TfvcItemRequestData:
    type: "object"
    properties:
      includeContentMetadata:
        type: "boolean"
        description: "If true, include metadata about the file type"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      itemDescriptors:
        type: "array"
        items:
          $ref: "#/definitions/TfvcItemDescriptor"
    description: ""
  TfvcLabel:
    allOf:
    - $ref: "#/definitions/TfvcLabelRef"
    description: ""
  TfvcLabelRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      labelScope:
        type: "string"
      modifiedDate:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      owner:
        $ref: "#/definitions/IdentityRef"
      url:
        type: "string"
    description: ""
  TfvcLabelRequestData:
    type: "object"
    properties:
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references"
      itemLabelFilter:
        type: "string"
      labelScope:
        type: "string"
      maxItemCount:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      owner:
        type: "string"
    description: ""
  TfvcMappingFilter:
    type: "object"
    properties:
      exclude:
        type: "boolean"
      serverPath:
        type: "string"
    description: ""
  TfvcMergeSource:
    type: "object"
    properties:
      isRename:
        type: "boolean"
        description: "Indicates if this a rename source. If false, it is a merge source."
      serverItem:
        type: "string"
        description: "The server item of the merge source"
      versionFrom:
        type: "integer"
        format: "int32"
        description: "Start of the version range"
      versionTo:
        type: "integer"
        format: "int32"
        description: "End of the version range"
    description: ""
  TfvcPolicyFailureInfo:
    type: "object"
    properties:
      message:
        type: "string"
      policyName:
        type: "string"
    description: ""
  TfvcPolicyOverrideInfo:
    type: "object"
    properties:
      comment:
        type: "string"
      policyFailures:
        type: "array"
        items:
          $ref: "#/definitions/TfvcPolicyFailureInfo"
    description: ""
  TfvcShallowBranchRef:
    type: "object"
    properties:
      path:
        type: "string"
        description: "Path for the branch."
    description: ""
  TfvcShelveset:
    allOf:
    - $ref: "#/definitions/TfvcShelvesetRef"
    description: "This is the deep shelveset class"
  TfvcShelvesetRef:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/ReferenceLinks"
      comment:
        type: "string"
      commentTruncated:
        type: "boolean"
      createdDate:
        type: "string"
        format: "date-time"
      id:
        type: "string"
      name:
        type: "string"
      owner:
        $ref: "#/definitions/IdentityRef"
      url:
        type: "string"
    description: "This is the shallow shelveset class"
  TfvcShelvesetRequestData:
    type: "object"
    properties:
      includeDetails:
        type: "boolean"
        description: "Whether to include policyOverride and notes Only applies when\
          \ requesting a single deep shelveset"
      includeLinks:
        type: "boolean"
        description: "Whether to include the _links field on the shallow references.\
          \ Does not apply when requesting a single deep shelveset object. Links will\
          \ always be included in the deep shelveset."
      includeWorkItems:
        type: "boolean"
        description: "Whether to include workItems"
      maxChangeCount:
        type: "integer"
        format: "int32"
        description: "Max number of changes to include"
      maxCommentLength:
        type: "integer"
        format: "int32"
        description: "Max length of comment"
      name:
        type: "string"
        description: "Shelveset's name"
      owner:
        type: "string"
        description: "Owner's ID. Could be a name or a guid."
    description: ""
  TfvcStatistics:
    type: "object"
    properties:
      changesetId:
        type: "integer"
        format: "int32"
        description: "Id of the last changeset the stats are based on."
      fileCountTotal:
        type: "integer"
        format: "int64"
        description: "Count of files at the requested scope."
    description: ""
  TfvcVersionDescriptor:
    type: "object"
    properties:
      version:
        type: "string"
      versionOption:
        type: "string"
        enum:
        - "none"
        - "previous"
        - "useRename"
        x-ms-enum:
          name: "TfvcVersionOption"
          values:
          - value: "none"
            description: ""
          - value: "previous"
            description: ""
          - value: "useRename"
            description: ""
      versionType:
        type: "string"
        enum:
        - "none"
        - "changeset"
        - "shelveset"
        - "change"
        - "date"
        - "latest"
        - "tip"
        - "mergeSource"
        x-ms-enum:
          name: "TfvcVersionType"
          values:
          - value: "none"
            description: ""
          - value: "changeset"
            description: ""
          - value: "shelveset"
            description: ""
          - value: "change"
            description: ""
          - value: "date"
            description: ""
          - value: "latest"
            description: ""
          - value: "tip"
            description: ""
          - value: "mergeSource"
            description: ""
    description: ""
  TitleDescriptionUpdatedEvent:
    allOf:
    - $ref: "#/definitions/RealTimePullRequestEvent"
    description: "Real time event (SignalR) for a title/description update on a pull\
      \ request"
  UpdateRefsRequest:
    type: "object"
    properties:
      refUpdateRequests:
        type: "array"
        items:
          $ref: "#/definitions/GitRefUpdate"
      updateMode:
        type: "string"
        enum:
        - "bestEffort"
        - "allOrNone"
        x-ms-enum:
          name: "GitRefUpdateMode"
          values:
          - value: "bestEffort"
            description: "Indicates the Git protocol model where any refs that can\
              \ be updated will be updated, but any failures will not prevent other\
              \ updates from succeeding."
          - value: "allOrNone"
            description: "Indicates that all ref updates must succeed or none will\
              \ succeed. All ref updates will be atomically written. If any failure\
              \ is encountered, previously successful updates will be rolled back\
              \ and the entire operation will fail."
    description: ""
  VersionControlProjectInfo:
    type: "object"
    properties:
      defaultSourceControlType:
        type: "string"
        enum:
        - "tfvc"
        - "git"
        x-ms-enum:
          name: "SourceControlTypes"
          values:
          - value: "tfvc"
            description: ""
          - value: "git"
            description: ""
      project:
        $ref: "#/definitions/TeamProjectReference"
      supportsGit:
        type: "boolean"
      supportsTFVC:
        type: "boolean"
    description: ""
  VersionedPolicyConfigurationRef:
    allOf:
    - $ref: "#/definitions/PolicyConfigurationRef"
    description: "A particular revision for a policy configuration."
  VssJsonCollectionWrapper:
    allOf:
    - $ref: "#/definitions/VssJsonCollectionWrapperBase"
    description: "This class is used to serialized collections as a single JSON object\
      \ on the wire, to avoid serializing JSON arrays directly to the client, which\
      \ can be a security hole"
  VssJsonCollectionWrapperBase:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
    description: ""
  WebApiCreateTagRequestData:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the tag definition that will be created."
    description: "The representation of data needed to create a tag definition which\
      \ is sent across the wire."
    example:
      name: "name"
  WebApiTagDefinition:
    type: "object"
    properties:
      active:
        type: "boolean"
        description: "Whether or not the tag definition is active."
      id:
        type: "string"
        format: "uuid"
        description: "ID of the tag definition."
      name:
        type: "string"
        description: "The name of the tag definition."
      url:
        type: "string"
        description: "Resource URL for the Tag Definition."
    description: "The representation of a tag definition which is sent across the\
      \ wire."
    example:
      name: "name"
      active: true
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      url: "url"
parameters:
  api-Version-preview.1:
    name: "api-version"
    in: "query"
    description: "Version of the API to use.  This should be set to '5.0-preview.1'\
      \ to use this version of the api."
    required: true
    type: "string"
    x-exportParamName: "ApiVersion"
  api-Version-preview.2:
    name: "api-version"
    in: "query"
    description: "Version of the API to use.  This should be set to '5.0-preview.2'\
      \ to use this version of the api."
    required: true
    type: "string"
    x-exportParamName: "ApiVersion"
externalDocs:
  description: "Visual Studio Team Services REST APIs"
  url: "https://www.visualstudio.com/docs/integrate/api/overview"
x-ms-parameterized-host:
  hostTemplate: "{accountName}.visualstudio.com"
  parameters:
  - name: "accountName"
    description: "The name of the Visual Studio Team Services account."
    required: true
    type: "string"
    in: "path"
x-ms-vss-area: "Git"
x-ms-vss-resource-area-id: "4e080c62-fa21-4fbc-8fef-2a10a2b38049"
x-ms-paths:
  /{project}/_apis/git/repositories/{repositoryId}?includeParent={includeParent}:
    get:
      tags:
      - "Repositories"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "repositories"
      x-ms-vss-method: "GetRepositoryWithParent"
      x-ms-preview: true
      description: "Retrieve a git repository."
      operationId: "Get Repository With Parent"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "repositoryId"
        description: "The name or ID of the repository."
        required: true
        type: "string"
      - in: "query"
        name: "includeParent"
        description: "True to include parent repository. Only available in authenticated\
          \ calls."
        required: true
        type: "boolean"
      - in: "path"
        name: "project"
        description: "Project ID or project name"
        required: true
        x-ms-required: false
        type: "string"
      - $ref: "#/parameters/api-Version-preview.1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitRepository"
      security:
      - oauth2:
        - "vso.code"
  /{project}/_apis/git/repositories/{repositoryId}/commits?:
    get:
      tags:
      - "Commits"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "commits"
      x-ms-vss-method: "GetCommits"
      x-ms-preview: true
      description: "Retrieve git commits for a project\n\nParameters that use the\
        \ searchCriteria prefix in their name can be specified without it as query\
        \ parameters, e.g. searchCriteria.$top -> $top"
      operationId: "Get Commits"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "repositoryId"
        description: "The id or friendly name of the repository. To use the friendly\
          \ name, projectId must also be specified."
        required: true
        type: "string"
      - in: "path"
        name: "project"
        description: "Project ID or project name"
        required: true
        x-ms-required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.historyMode"
        description: "What Git history mode should be used. This only applies to the\
          \ search criteria when Ids = null and an itemPath is specified."
        required: false
        type: "string"
        enum:
        - "simplifiedHistory"
        - "firstParent"
        - "fullHistory"
        - "fullHistorySimplifyMerges"
        x-ms-enum:
          name: "GitHistoryMode"
          values:
          - value: "simplifiedHistory"
            description: "The history mode used by `git log`. This is the default."
          - value: "firstParent"
            description: "The history mode used by `git log --first-parent`"
          - value: "fullHistory"
            description: "The history mode used by `git log --full-history`"
          - value: "fullHistorySimplifyMerges"
            description: "The history mode used by `git log --full-history --simplify-merges`"
      - in: "query"
        name: "searchCriteria.includePushData"
        description: "Whether to include the push information"
        required: false
        type: "boolean"
      - in: "query"
        name: "searchCriteria.includeUserImageUrl"
        description: "Whether to include the image Url for committers and authors"
        required: false
        type: "boolean"
      - in: "query"
        name: "searchCriteria.includeWorkItems"
        description: "Whether to include linked work items"
        required: false
        type: "boolean"
      - in: "query"
        name: "searchCriteria.includeLinks"
        description: "Whether to include the _links field on the shallow references"
        required: false
        type: "boolean"
      - in: "query"
        name: "searchCriteria.$top"
        description: "Maximum number of entries to retrieve"
        required: false
        type: "integer"
        format: "int32"
      - in: "query"
        name: "searchCriteria.$skip"
        description: "Number of entries to skip"
        required: false
        type: "integer"
        format: "int32"
      - in: "query"
        name: "searchCriteria.excludeDeletes"
        description: "Only applies when an itemPath is specified. This determines\
          \ whether to exclude delete entries of the specified path."
        required: false
        type: "boolean"
      - in: "query"
        name: "searchCriteria.itemPath"
        description: "Path of item to search under"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.author"
        description: "Alias or display name of the author"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.user"
        description: "Alias or display name of the committer"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.toCommitId"
        description: "If provided, an upper bound for filtering commits alphabetically"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.fromCommitId"
        description: "If provided, a lower bound for filtering commits alphabetically"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.compareVersion.versionOptions"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      - in: "query"
        name: "searchCriteria.compareVersion.version"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.compareVersion.versionType"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
      - in: "query"
        name: "searchCriteria.itemVersion.versionOptions"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      - in: "query"
        name: "searchCriteria.itemVersion.version"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.itemVersion.versionType"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
      - in: "query"
        name: "searchCriteria.toDate"
        description: "If provided, only include history entries created before this\
          \ date (string)"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.fromDate"
        description: "If provided, only include history entries created after this\
          \ date (string)"
        required: false
        type: "string"
      - in: "query"
        name: "searchCriteria.ids"
        description: "If provided, specifies the exact commit ids of the commits to\
          \ fetch. May not be combined with other parameters."
        required: false
        type: "array"
        items:
          type: "string"
      - $ref: "#/parameters/api-Version-preview.1"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GitCommitRef"
      security:
      - oauth2:
        - "vso.code"
      x-ms-examples:
        All commits:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits.json"
        By author:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_author-_author_.json"
        By committer:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_committer-_committer_.json"
        On a branch:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_branch.json"
        On a branch and in a path:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_branch_itemPath-_itemPath_.json"
        Reachable from a commit:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_commit.json"
        Reachable from a commit and path:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_commit_itemPath-_itemPath_.json"
        In a date range:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits_fromDate-_fromDate__toDate-_toDate_.json"
        Paging:
          $ref: "./httpExamples/Commits/GET__git_repositories__repositoryId__commits__skip-_skip___top-_top_.json"
  /{project}/_apis/git/repositories/{repositoryId}/items?path={path}:
    get:
      tags:
      - "Items"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "items"
      x-ms-vss-method: "GetItem"
      x-ms-preview: true
      description: "Get Item Metadata and/or Content for a single item. The download\
        \ parameter is to indicate whether the content should be available as a download\
        \ or just sent as a stream in the response. Doesn't apply to zipped content,\
        \ which is always returned as a download."
      operationId: "Get"
      produces:
      - "application/zip"
      - "text/plain"
      - "application/octet-stream"
      - "application/json"
      parameters:
      - in: "path"
        name: "repositoryId"
        description: "The name or ID of the repository."
        required: true
        type: "string"
      - in: "query"
        name: "path"
        description: "The item path."
        required: true
        type: "string"
      - in: "path"
        name: "project"
        description: "Project ID or project name"
        required: true
        x-ms-required: false
        type: "string"
      - in: "query"
        name: "scopePath"
        description: "The path scope.  The default is null."
        required: false
        type: "string"
      - in: "query"
        name: "recursionLevel"
        description: "The recursion level of this request. The default is 'none',\
          \ no recursion."
        required: false
        type: "string"
        enum:
        - "none"
        - "oneLevel"
        - "oneLevelPlusNestedEmptyFolders"
        - "full"
        x-ms-enum:
          name: "VersionControlRecursionType"
          values:
          - value: "none"
            description: "Only return the specified item."
          - value: "oneLevel"
            description: "Return the specified item and its direct children."
          - value: "oneLevelPlusNestedEmptyFolders"
            description: "Return the specified item and its direct children, as well\
              \ as recursive chains of nested child folders that only contain a single\
              \ folder."
          - value: "full"
            description: "Return specified item and all descendants"
      - in: "query"
        name: "includeContentMetadata"
        description: "Set to true to include content metadata.  Default is false."
        required: false
        type: "boolean"
      - in: "query"
        name: "latestProcessedChange"
        description: "Set to true to include the lastest changes.  Default is false."
        required: false
        type: "boolean"
      - in: "query"
        name: "download"
        description: "Set to true to download the response as a file.  Default is\
          \ false."
        required: false
        type: "boolean"
      - in: "query"
        name: "$format"
        description: "If specified, this overrides the HTTP Accept request header\
          \ to return either 'json' or 'zip'. If $format is specified, then api-version\
          \ should also be specified as a query parameter."
        required: false
        type: "string"
      - in: "query"
        name: "versionDescriptor.versionOptions"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      - in: "query"
        name: "versionDescriptor.version"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
      - in: "query"
        name: "versionDescriptor.versionType"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
      - in: "query"
        name: "includeContent"
        description: "Set to true to include item content when requesting json.  Default\
          \ is false."
        required: false
        type: "boolean"
      - in: "query"
        name: "resolveLfs"
        description: "Set to true to resolve Git LFS pointer files to return actual\
          \ content from Git LFS.  Default is false."
        required: false
        type: "boolean"
      - $ref: "#/parameters/api-Version-preview.1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitItem"
      security:
      - oauth2:
        - "vso.code"
      x-ms-examples:
        Get metadata:
          $ref: "./httpExamples/Items/GET__git_repositories__repositoryId__items_scopePath-_filePath_.json"
        Download:
          $ref: "./httpExamples/Items/GET__git_repositories__repositoryId__items_scopePath-_filePath__download-true.json"
  /{project}/_apis/git/repositories/{repositoryId}/stats/branches?name={name}:
    get:
      tags:
      - "Stats"
      x-ms-docs-override-version: "5.0-preview.1"
      x-ms-vss-resource: "branchStats"
      x-ms-vss-method: "GetBranch"
      x-ms-preview: true
      description: "Retrieve statistics about a single branch."
      operationId: "Get"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "repositoryId"
        description: "The name or ID of the repository."
        required: true
        type: "string"
      - in: "query"
        name: "name"
        description: "Name of the branch."
        required: true
        type: "string"
      - in: "path"
        name: "project"
        description: "Project ID or project name"
        required: true
        x-ms-required: false
        type: "string"
      - in: "query"
        name: "baseVersionDescriptor.versionOptions"
        description: "Version options - Specify additional modifiers to version (e.g\
          \ Previous)"
        required: false
        type: "string"
        enum:
        - "none"
        - "previousChange"
        - "firstParent"
        x-ms-enum:
          name: "GitVersionOptions"
          values:
          - value: "none"
            description: "Not specified"
          - value: "previousChange"
            description: "Commit that changed item prior to the current version"
          - value: "firstParent"
            description: "First parent of commit (HEAD^)"
      - in: "query"
        name: "baseVersionDescriptor.version"
        description: "Version string identifier (name of tag/branch, SHA1 of commit)"
        required: false
        type: "string"
      - in: "query"
        name: "baseVersionDescriptor.versionType"
        description: "Version type (branch, tag, or commit). Determines how Id is\
          \ interpreted"
        required: false
        type: "string"
        enum:
        - "branch"
        - "tag"
        - "commit"
        x-ms-enum:
          name: "GitVersionType"
          values:
          - value: "branch"
            description: "Interpret the version as a branch name"
          - value: "tag"
            description: "Interpret the version as a tag name"
          - value: "commit"
            description: "Interpret the version as a commit ID (SHA1)"
      - $ref: "#/parameters/api-Version-preview.1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GitBranchStats"
      security:
      - oauth2:
        - "vso.code"
      x-ms-examples:
        For a single branch:
          $ref: "./httpExamples/BranchStats/GET__git_repositories__repositoryId__stats_branches__name_.json"
        For a tag or commit:
          $ref: "./httpExamples/BranchStats/GET__git_repositories__repositoryId__stats_branches__name__baseVersionType-_baseVersionType__baseVersion-_baseVersion_.json"
