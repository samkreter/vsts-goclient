/*
 * Git
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 5.0-preview
 * Contact: nugetvss@microsoft.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ItemsApiService service

/*
ItemsApiService
Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.
 * @param repositoryId The name or ID of the repository
 * @param project Project ID or project name
 * @param apiVersion Version of the API to use.  This should be set to &#39;5.0-preview.1&#39; to use this version of the api.

@return [][]ErrorUnknown
*/
func (a *ItemsApiService) GetItemsBatch(ctx context.Context, body GitItemRequestData, repositoryId string, project string, apiVersion string) ([][]interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue [][]interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{project}/_apis/git/repositories/{repositoryId}/itemsbatch"
	localVarPath = strings.Replace(localVarPath, "{"+"repositoryId"+"}", fmt.Sprintf("%v", repositoryId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", fmt.Sprintf("%v", project), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("api-version", parameterToString(apiVersion, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
			if err != nil {
				return localVarReturnValue, localVarHttpResponse, err
			}

			var v [][]interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ItemsApiService
Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn&#39;t apply to zipped content which is always returned as a download.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param repositoryId The name or ID of the repository.
 * @param project Project ID or project name
 * @param apiVersion Version of the API to use.  This should be set to &#39;5.0-preview.1&#39; to use this version of the api.
 * @param optional nil or *ListItemsOpts - Optional Parameters:
     * @param "ScopePath" (optional.String) -  The path scope.  The default is null.
     * @param "RecursionLevel" (optional.String) -  The recursion level of this request. The default is &#39;none&#39;, no recursion.
     * @param "IncludeContentMetadata" (optional.Bool) -  Set to true to include content metadata.  Default is false.
     * @param "LatestProcessedChange" (optional.Bool) -  Set to true to include the lastest changes.  Default is false.
     * @param "Download" (optional.Bool) -  Set to true to download the response as a file.  Default is false.
     * @param "IncludeLinks" (optional.Bool) -  Set to true to include links to items.  Default is false.
     * @param "Format" (optional.String) -  If specified, this overrides the HTTP Accept request header to return either &#39;json&#39; or &#39;zip&#39;. If $format is specified, then api-version should also be specified as a query parameter.
     * @param "VersionDescriptorVersionOptions" (optional.String) -  Version options - Specify additional modifiers to version (e.g Previous)
     * @param "VersionDescriptorVersion" (optional.String) -  Version string identifier (name of tag/branch, SHA1 of commit)
     * @param "VersionDescriptorVersionType" (optional.String) -  Version type (branch, tag, or commit). Determines how Id is interpreted

@return []GitItem
*/

type ListItemsOpts struct {
	ScopePath                       optional.String
	RecursionLevel                  optional.String
	IncludeContentMetadata          optional.Bool
	LatestProcessedChange           optional.Bool
	Download                        optional.Bool
	IncludeLinks                    optional.Bool
	Format                          optional.String
	VersionDescriptorVersionOptions optional.String
	VersionDescriptorVersion        optional.String
	VersionDescriptorVersionType    optional.String
}

func (a *ItemsApiService) List(ctx context.Context, repositoryId string, project string, apiVersion string, localVarOptionals *ListItemsOpts) ([]GitItem, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []GitItem
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/{project}/_apis/git/repositories/{repositoryId}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"repositoryId"+"}", fmt.Sprintf("%v", repositoryId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", fmt.Sprintf("%v", project), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ScopePath.IsSet() {
		localVarQueryParams.Add("scopePath", parameterToString(localVarOptionals.ScopePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RecursionLevel.IsSet() {
		localVarQueryParams.Add("recursionLevel", parameterToString(localVarOptionals.RecursionLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeContentMetadata.IsSet() {
		localVarQueryParams.Add("includeContentMetadata", parameterToString(localVarOptionals.IncludeContentMetadata.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LatestProcessedChange.IsSet() {
		localVarQueryParams.Add("latestProcessedChange", parameterToString(localVarOptionals.LatestProcessedChange.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Download.IsSet() {
		localVarQueryParams.Add("download", parameterToString(localVarOptionals.Download.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeLinks.IsSet() {
		localVarQueryParams.Add("includeLinks", parameterToString(localVarOptionals.IncludeLinks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("$format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VersionDescriptorVersionOptions.IsSet() {
		localVarQueryParams.Add("versionDescriptor.versionOptions", parameterToString(localVarOptionals.VersionDescriptorVersionOptions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VersionDescriptorVersion.IsSet() {
		localVarQueryParams.Add("versionDescriptor.version", parameterToString(localVarOptionals.VersionDescriptorVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VersionDescriptorVersionType.IsSet() {
		localVarQueryParams.Add("versionDescriptor.versionType", parameterToString(localVarOptionals.VersionDescriptorVersionType.Value(), ""))
	}
	localVarQueryParams.Add("api-version", parameterToString(apiVersion, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
			if err != nil {
				return localVarReturnValue, localVarHttpResponse, err
			}

			var v []GitItem
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
